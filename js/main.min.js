!function(t,e){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(C,t){"use strict";var e=[],T=C.document,i=Object.getPrototypeOf,a=e.slice,g=e.concat,l=e.push,r=e.indexOf,n={},s=n.toString,m=n.hasOwnProperty,o=m.toString,u=o.call(Object),v={},y=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType},x=function(t){return null!=t&&t===t.window},c={type:!0,src:!0,noModule:!0};function w(t,e,n){var i,r=(e=e||T).createElement("script");if(r.text=t,n)for(i in c)n[i]&&(r[i]=n[i]);e.head.appendChild(r).parentNode.removeChild(r)}function _(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?n[s.call(t)]||"object":typeof t}var h="3.3.1",E=function(t,e){return new E.fn.init(t,e)},p=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function d(t){var e=!!t&&"length"in t&&t.length,n=_(t);return!y(t)&&!x(t)&&("array"===n||0===e||"number"==typeof e&&0<e&&e-1 in t)}E.fn=E.prototype={jquery:h,constructor:E,length:0,toArray:function(){return a.call(this)},get:function(t){return null==t?a.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=E.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return E.each(this,t)},map:function(n){return this.pushStack(E.map(this,function(t,e){return n.call(t,e,t)}))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(0<=n&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:e.sort,splice:e.splice},E.extend=E.fn.extend=function(){var t,e,n,i,r,s,o=arguments[0]||{},a=1,l=arguments.length,u=!1;for("boolean"==typeof o&&(u=o,o=arguments[a]||{},a++),"object"==typeof o||y(o)||(o={}),a===l&&(o=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)n=o[e],o!==(i=t[e])&&(u&&i&&(E.isPlainObject(i)||(r=Array.isArray(i)))?(s=r?(r=!1,n&&Array.isArray(n)?n:[]):n&&E.isPlainObject(n)?n:{},o[e]=E.extend(u,s,i)):void 0!==i&&(o[e]=i));return o},E.extend({expando:"jQuery"+(h+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==s.call(t))&&(!(e=i(t))||"function"==typeof(n=m.call(e,"constructor")&&e.constructor)&&o.call(n)===u)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t){w(t)},each:function(t,e){var n,i=0;if(d(t))for(n=t.length;i<n&&!1!==e.call(t[i],i,t[i]);i++);else for(i in t)if(!1===e.call(t[i],i,t[i]))break;return t},trim:function(t){return null==t?"":(t+"").replace(p,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(d(Object(t))?E.merge(n,"string"==typeof t?[t]:t):l.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:r.call(e,t,n)},merge:function(t,e){for(var n=+e.length,i=0,r=t.length;i<n;i++)t[r++]=e[i];return t.length=r,t},grep:function(t,e,n){for(var i=[],r=0,s=t.length,o=!n;r<s;r++)!e(t[r],r)!==o&&i.push(t[r]);return i},map:function(t,e,n){var i,r,s=0,o=[];if(d(t))for(i=t.length;s<i;s++)null!=(r=e(t[s],s,n))&&o.push(r);else for(s in t)null!=(r=e(t[s],s,n))&&o.push(r);return g.apply([],o)},guid:1,support:v}),"function"==typeof Symbol&&(E.fn[Symbol.iterator]=e[Symbol.iterator]),E.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){n["[object "+e+"]"]=e.toLowerCase()});var f=function(n){var t,d,w,s,r,f,h,g,_,l,u,b,C,o,T,m,a,c,v,E="sizzle"+1*new Date,y=n.document,D=0,i=0,p=ot(),x=ot(),k=ot(),S=function(t,e){return t===e&&(u=!0),0},$={}.hasOwnProperty,e=[],j=e.pop,A=e.push,N=e.push,L=e.slice,q=function(t,e){for(var n=0,i=t.length;n<i;n++)if(t[n]===e)return n;return-1},z="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",H="[\\x20\\t\\r\\n\\f]",P="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",O="\\["+H+"*("+P+")(?:"+H+"*([*^$|!~]?=)"+H+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+P+"))|)"+H+"*\\]",M=":("+P+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+O+")*)|.*)\\)|)",R=new RegExp(H+"+","g"),I=new RegExp("^"+H+"+|((?:^|[^\\\\])(?:\\\\.)*)"+H+"+$","g"),W=new RegExp("^"+H+"*,"+H+"*"),B=new RegExp("^"+H+"*([>+~]|"+H+")"+H+"*"),F=new RegExp("="+H+"*([^\\]'\"]*?)"+H+"*\\]","g"),U=new RegExp(M),X=new RegExp("^"+P+"$"),V={ID:new RegExp("^#("+P+")"),CLASS:new RegExp("^\\.("+P+")"),TAG:new RegExp("^("+P+"|[*])"),ATTR:new RegExp("^"+O),PSEUDO:new RegExp("^"+M),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+H+"*(even|odd|(([+-]|)(\\d*)n|)"+H+"*(?:([+-]|)"+H+"*(\\d+)|))"+H+"*\\)|)","i"),bool:new RegExp("^(?:"+z+")$","i"),needsContext:new RegExp("^"+H+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+H+"*((?:-\\d)?\\d*)"+H+"*\\)|)(?=[^-]|$)","i")},Q=/^(?:input|select|textarea|button)$/i,G=/^h\d$/i,Y=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,J=/[+~]/,K=new RegExp("\\\\([\\da-f]{1,6}"+H+"?|("+H+")|.)","ig"),tt=function(t,e,n){var i="0x"+e-65536;return i!=i||n?e:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},et=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,nt=function(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},it=function(){b()},rt=yt(function(t){return!0===t.disabled&&("form"in t||"label"in t)},{dir:"parentNode",next:"legend"});try{N.apply(e=L.call(y.childNodes),y.childNodes),e[y.childNodes.length].nodeType}catch(t){N={apply:e.length?function(t,e){A.apply(t,L.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}function st(t,e,n,i){var r,s,o,a,l,u,c,h=e&&e.ownerDocument,p=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==p&&9!==p&&11!==p)return n;if(!i&&((e?e.ownerDocument||e:y)!==C&&b(e),e=e||C,T)){if(11!==p&&(l=Z.exec(t)))if(r=l[1]){if(9===p){if(!(o=e.getElementById(r)))return n;if(o.id===r)return n.push(o),n}else if(h&&(o=h.getElementById(r))&&v(e,o)&&o.id===r)return n.push(o),n}else{if(l[2])return N.apply(n,e.getElementsByTagName(t)),n;if((r=l[3])&&d.getElementsByClassName&&e.getElementsByClassName)return N.apply(n,e.getElementsByClassName(r)),n}if(d.qsa&&!k[t+" "]&&(!m||!m.test(t))){if(1!==p)h=e,c=t;else if("object"!==e.nodeName.toLowerCase()){for((a=e.getAttribute("id"))?a=a.replace(et,nt):e.setAttribute("id",a=E),s=(u=f(t)).length;s--;)u[s]="#"+a+" "+vt(u[s]);c=u.join(","),h=J.test(t)&&gt(e.parentNode)||e}if(c)try{return N.apply(n,h.querySelectorAll(c)),n}catch(t){}finally{a===E&&e.removeAttribute("id")}}}return g(t.replace(I,"$1"),e,n,i)}function ot(){var i=[];return function t(e,n){return i.push(e+" ")>w.cacheLength&&delete t[i.shift()],t[e+" "]=n}}function at(t){return t[E]=!0,t}function lt(t){var e=C.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function ut(t,e){for(var n=t.split("|"),i=n.length;i--;)w.attrHandle[n[i]]=e}function ct(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function ht(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function pt(n){return function(t){var e=t.nodeName.toLowerCase();return("input"===e||"button"===e)&&t.type===n}}function dt(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&rt(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function ft(o){return at(function(s){return s=+s,at(function(t,e){for(var n,i=o([],t.length,s),r=i.length;r--;)t[n=i[r]]&&(t[n]=!(e[n]=t[n]))})})}function gt(t){return t&&void 0!==t.getElementsByTagName&&t}for(t in d=st.support={},r=st.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},b=st.setDocument=function(t){var e,n,i=t?t.ownerDocument||t:y;return i!==C&&9===i.nodeType&&i.documentElement&&(o=(C=i).documentElement,T=!r(C),y!==C&&(n=C.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",it,!1):n.attachEvent&&n.attachEvent("onunload",it)),d.attributes=lt(function(t){return t.className="i",!t.getAttribute("className")}),d.getElementsByTagName=lt(function(t){return t.appendChild(C.createComment("")),!t.getElementsByTagName("*").length}),d.getElementsByClassName=Y.test(C.getElementsByClassName),d.getById=lt(function(t){return o.appendChild(t).id=E,!C.getElementsByName||!C.getElementsByName(E).length}),d.getById?(w.filter.ID=function(t){var e=t.replace(K,tt);return function(t){return t.getAttribute("id")===e}},w.find.ID=function(t,e){if(void 0!==e.getElementById&&T){var n=e.getElementById(t);return n?[n]:[]}}):(w.filter.ID=function(t){var n=t.replace(K,tt);return function(t){var e=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return e&&e.value===n}},w.find.ID=function(t,e){if(void 0!==e.getElementById&&T){var n,i,r,s=e.getElementById(t);if(s){if((n=s.getAttributeNode("id"))&&n.value===t)return[s];for(r=e.getElementsByName(t),i=0;s=r[i++];)if((n=s.getAttributeNode("id"))&&n.value===t)return[s]}return[]}}),w.find.TAG=d.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):d.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,i=[],r=0,s=e.getElementsByTagName(t);if("*"!==t)return s;for(;n=s[r++];)1===n.nodeType&&i.push(n);return i},w.find.CLASS=d.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&T)return e.getElementsByClassName(t)},a=[],m=[],(d.qsa=Y.test(C.querySelectorAll))&&(lt(function(t){o.appendChild(t).innerHTML="<a id='"+E+"'></a><select id='"+E+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+H+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||m.push("\\["+H+"*(?:value|"+z+")"),t.querySelectorAll("[id~="+E+"-]").length||m.push("~="),t.querySelectorAll(":checked").length||m.push(":checked"),t.querySelectorAll("a#"+E+"+*").length||m.push(".#.+[+~]")}),lt(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=C.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&m.push("name"+H+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),o.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),m.push(",.*:")})),(d.matchesSelector=Y.test(c=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&lt(function(t){d.disconnectedMatch=c.call(t,"*"),c.call(t,"[s!='']:x"),a.push("!=",M)}),m=m.length&&new RegExp(m.join("|")),a=a.length&&new RegExp(a.join("|")),e=Y.test(o.compareDocumentPosition),v=e||Y.test(o.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},S=e?function(t,e){if(t===e)return u=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n||(1&(n=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!d.sortDetached&&e.compareDocumentPosition(t)===n?t===C||t.ownerDocument===y&&v(y,t)?-1:e===C||e.ownerDocument===y&&v(y,e)?1:l?q(l,t)-q(l,e):0:4&n?-1:1)}:function(t,e){if(t===e)return u=!0,0;var n,i=0,r=t.parentNode,s=e.parentNode,o=[t],a=[e];if(!r||!s)return t===C?-1:e===C?1:r?-1:s?1:l?q(l,t)-q(l,e):0;if(r===s)return ct(t,e);for(n=t;n=n.parentNode;)o.unshift(n);for(n=e;n=n.parentNode;)a.unshift(n);for(;o[i]===a[i];)i++;return i?ct(o[i],a[i]):o[i]===y?-1:a[i]===y?1:0}),C},st.matches=function(t,e){return st(t,null,null,e)},st.matchesSelector=function(t,e){if((t.ownerDocument||t)!==C&&b(t),e=e.replace(F,"='$1']"),d.matchesSelector&&T&&!k[e+" "]&&(!a||!a.test(e))&&(!m||!m.test(e)))try{var n=c.call(t,e);if(n||d.disconnectedMatch||t.document&&11!==t.document.nodeType)return n}catch(t){}return 0<st(e,C,null,[t]).length},st.contains=function(t,e){return(t.ownerDocument||t)!==C&&b(t),v(t,e)},st.attr=function(t,e){(t.ownerDocument||t)!==C&&b(t);var n=w.attrHandle[e.toLowerCase()],i=n&&$.call(w.attrHandle,e.toLowerCase())?n(t,e,!T):void 0;return void 0!==i?i:d.attributes||!T?t.getAttribute(e):(i=t.getAttributeNode(e))&&i.specified?i.value:null},st.escape=function(t){return(t+"").replace(et,nt)},st.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},st.uniqueSort=function(t){var e,n=[],i=0,r=0;if(u=!d.detectDuplicates,l=!d.sortStable&&t.slice(0),t.sort(S),u){for(;e=t[r++];)e===t[r]&&(i=n.push(r));for(;i--;)t.splice(n[i],1)}return l=null,t},s=st.getText=function(t){var e,n="",i=0,r=t.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=s(t)}else if(3===r||4===r)return t.nodeValue}else for(;e=t[i++];)n+=s(e);return n},(w=st.selectors={cacheLength:50,createPseudo:at,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(K,tt),t[3]=(t[3]||t[4]||t[5]||"").replace(K,tt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||st.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&st.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return V.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&U.test(n)&&(e=f(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(K,tt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=p[t+" "];return e||(e=new RegExp("(^|"+H+")"+t+"("+H+"|$)"))&&p(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(n,i,r){return function(t){var e=st.attr(t,n);return null==e?"!="===i:!i||(e+="","="===i?e===r:"!="===i?e!==r:"^="===i?r&&0===e.indexOf(r):"*="===i?r&&-1<e.indexOf(r):"$="===i?r&&e.slice(-r.length)===r:"~="===i?-1<(" "+e.replace(R," ")+" ").indexOf(r):"|="===i&&(e===r||e.slice(0,r.length+1)===r+"-"))}},CHILD:function(f,t,e,g,m){var v="nth"!==f.slice(0,3),y="last"!==f.slice(-4),x="of-type"===t;return 1===g&&0===m?function(t){return!!t.parentNode}:function(t,e,n){var i,r,s,o,a,l,u=v!==y?"nextSibling":"previousSibling",c=t.parentNode,h=x&&t.nodeName.toLowerCase(),p=!n&&!x,d=!1;if(c){if(v){for(;u;){for(o=t;o=o[u];)if(x?o.nodeName.toLowerCase()===h:1===o.nodeType)return!1;l=u="only"===f&&!l&&"nextSibling"}return!0}if(l=[y?c.firstChild:c.lastChild],y&&p){for(d=(a=(i=(r=(s=(o=c)[E]||(o[E]={}))[o.uniqueID]||(s[o.uniqueID]={}))[f]||[])[0]===D&&i[1])&&i[2],o=a&&c.childNodes[a];o=++a&&o&&o[u]||(d=a=0)||l.pop();)if(1===o.nodeType&&++d&&o===t){r[f]=[D,a,d];break}}else if(p&&(d=a=(i=(r=(s=(o=t)[E]||(o[E]={}))[o.uniqueID]||(s[o.uniqueID]={}))[f]||[])[0]===D&&i[1]),!1===d)for(;(o=++a&&o&&o[u]||(d=a=0)||l.pop())&&((x?o.nodeName.toLowerCase()!==h:1!==o.nodeType)||!++d||(p&&((r=(s=o[E]||(o[E]={}))[o.uniqueID]||(s[o.uniqueID]={}))[f]=[D,d]),o!==t)););return(d-=m)===g||d%g==0&&0<=d/g}}},PSEUDO:function(t,s){var e,o=w.pseudos[t]||w.setFilters[t.toLowerCase()]||st.error("unsupported pseudo: "+t);return o[E]?o(s):1<o.length?(e=[t,t,"",s],w.setFilters.hasOwnProperty(t.toLowerCase())?at(function(t,e){for(var n,i=o(t,s),r=i.length;r--;)t[n=q(t,i[r])]=!(e[n]=i[r])}):function(t){return o(t,0,e)}):o}},pseudos:{not:at(function(t){var i=[],r=[],a=h(t.replace(I,"$1"));return a[E]?at(function(t,e,n,i){for(var r,s=a(t,null,i,[]),o=t.length;o--;)(r=s[o])&&(t[o]=!(e[o]=r))}):function(t,e,n){return i[0]=t,a(i,null,n,r),i[0]=null,!r.pop()}}),has:at(function(e){return function(t){return 0<st(e,t).length}}),contains:at(function(e){return e=e.replace(K,tt),function(t){return-1<(t.textContent||t.innerText||s(t)).indexOf(e)}}),lang:at(function(n){return X.test(n||"")||st.error("unsupported lang: "+n),n=n.replace(K,tt).toLowerCase(),function(t){var e;do{if(e=T?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(e=e.toLowerCase())===n||0===e.indexOf(n+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var e=n.location&&n.location.hash;return e&&e.slice(1)===t.id},root:function(t){return t===o},focus:function(t){return t===C.activeElement&&(!C.hasFocus||C.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:dt(!1),disabled:dt(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!w.pseudos.empty(t)},header:function(t){return G.test(t.nodeName)},input:function(t){return Q.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:ft(function(){return[0]}),last:ft(function(t,e){return[e-1]}),eq:ft(function(t,e,n){return[n<0?n+e:n]}),even:ft(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:ft(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:ft(function(t,e,n){for(var i=n<0?n+e:n;0<=--i;)t.push(i);return t}),gt:ft(function(t,e,n){for(var i=n<0?n+e:n;++i<e;)t.push(i);return t})}}).pseudos.nth=w.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})w.pseudos[t]=ht(t);for(t in{submit:!0,reset:!0})w.pseudos[t]=pt(t);function mt(){}function vt(t){for(var e=0,n=t.length,i="";e<n;e++)i+=t[e].value;return i}function yt(a,t,e){var l=t.dir,u=t.next,c=u||l,h=e&&"parentNode"===c,p=i++;return t.first?function(t,e,n){for(;t=t[l];)if(1===t.nodeType||h)return a(t,e,n);return!1}:function(t,e,n){var i,r,s,o=[D,p];if(n){for(;t=t[l];)if((1===t.nodeType||h)&&a(t,e,n))return!0}else for(;t=t[l];)if(1===t.nodeType||h)if(r=(s=t[E]||(t[E]={}))[t.uniqueID]||(s[t.uniqueID]={}),u&&u===t.nodeName.toLowerCase())t=t[l]||t;else{if((i=r[c])&&i[0]===D&&i[1]===p)return o[2]=i[2];if((r[c]=o)[2]=a(t,e,n))return!0}return!1}}function xt(r){return 1<r.length?function(t,e,n){for(var i=r.length;i--;)if(!r[i](t,e,n))return!1;return!0}:r[0]}function wt(t,e,n,i,r){for(var s,o=[],a=0,l=t.length,u=null!=e;a<l;a++)(s=t[a])&&(n&&!n(s,i,r)||(o.push(s),u&&e.push(a)));return o}function _t(d,f,g,m,v,t){return m&&!m[E]&&(m=_t(m)),v&&!v[E]&&(v=_t(v,t)),at(function(t,e,n,i){var r,s,o,a=[],l=[],u=e.length,c=t||function(t,e,n){for(var i=0,r=e.length;i<r;i++)st(t,e[i],n);return n}(f||"*",n.nodeType?[n]:n,[]),h=!d||!t&&f?c:wt(c,a,d,n,i),p=g?v||(t?d:u||m)?[]:e:h;if(g&&g(h,p,n,i),m)for(r=wt(p,l),m(r,[],n,i),s=r.length;s--;)(o=r[s])&&(p[l[s]]=!(h[l[s]]=o));if(t){if(v||d){if(v){for(r=[],s=p.length;s--;)(o=p[s])&&r.push(h[s]=o);v(null,p=[],r,i)}for(s=p.length;s--;)(o=p[s])&&-1<(r=v?q(t,o):a[s])&&(t[r]=!(e[r]=o))}}else p=wt(p===e?p.splice(u,p.length):p),v?v(null,e,p,i):N.apply(e,p)})}function bt(t){for(var r,e,n,i=t.length,s=w.relative[t[0].type],o=s||w.relative[" "],a=s?1:0,l=yt(function(t){return t===r},o,!0),u=yt(function(t){return-1<q(r,t)},o,!0),c=[function(t,e,n){var i=!s&&(n||e!==_)||((r=e).nodeType?l(t,e,n):u(t,e,n));return r=null,i}];a<i;a++)if(e=w.relative[t[a].type])c=[yt(xt(c),e)];else{if((e=w.filter[t[a].type].apply(null,t[a].matches))[E]){for(n=++a;n<i&&!w.relative[t[n].type];n++);return _t(1<a&&xt(c),1<a&&vt(t.slice(0,a-1).concat({value:" "===t[a-2].type?"*":""})).replace(I,"$1"),e,a<n&&bt(t.slice(a,n)),n<i&&bt(t=t.slice(n)),n<i&&vt(t))}c.push(e)}return xt(c)}return mt.prototype=w.filters=w.pseudos,w.setFilters=new mt,f=st.tokenize=function(t,e){var n,i,r,s,o,a,l,u=x[t+" "];if(u)return e?0:u.slice(0);for(o=t,a=[],l=w.preFilter;o;){for(s in n&&!(i=W.exec(o))||(i&&(o=o.slice(i[0].length)||o),a.push(r=[])),n=!1,(i=B.exec(o))&&(n=i.shift(),r.push({value:n,type:i[0].replace(I," ")}),o=o.slice(n.length)),w.filter)!(i=V[s].exec(o))||l[s]&&!(i=l[s](i))||(n=i.shift(),r.push({value:n,type:s,matches:i}),o=o.slice(n.length));if(!n)break}return e?o.length:o?st.error(t):x(t,a).slice(0)},h=st.compile=function(t,e){var n,m,v,y,x,i,r=[],s=[],o=k[t+" "];if(!o){for(e||(e=f(t)),n=e.length;n--;)(o=bt(e[n]))[E]?r.push(o):s.push(o);(o=k(t,(m=s,y=0<(v=r).length,x=0<m.length,i=function(t,e,n,i,r){var s,o,a,l=0,u="0",c=t&&[],h=[],p=_,d=t||x&&w.find.TAG("*",r),f=D+=null==p?1:Math.random()||.1,g=d.length;for(r&&(_=e===C||e||r);u!==g&&null!=(s=d[u]);u++){if(x&&s){for(o=0,e||s.ownerDocument===C||(b(s),n=!T);a=m[o++];)if(a(s,e||C,n)){i.push(s);break}r&&(D=f)}y&&((s=!a&&s)&&l--,t&&c.push(s))}if(l+=u,y&&u!==l){for(o=0;a=v[o++];)a(c,h,e,n);if(t){if(0<l)for(;u--;)c[u]||h[u]||(h[u]=j.call(i));h=wt(h)}N.apply(i,h),r&&!t&&0<h.length&&1<l+v.length&&st.uniqueSort(i)}return r&&(D=f,_=p),c},y?at(i):i))).selector=t}return o},g=st.select=function(t,e,n,i){var r,s,o,a,l,u="function"==typeof t&&t,c=!i&&f(t=u.selector||t);if(n=n||[],1===c.length){if(2<(s=c[0]=c[0].slice(0)).length&&"ID"===(o=s[0]).type&&9===e.nodeType&&T&&w.relative[s[1].type]){if(!(e=(w.find.ID(o.matches[0].replace(K,tt),e)||[])[0]))return n;u&&(e=e.parentNode),t=t.slice(s.shift().value.length)}for(r=V.needsContext.test(t)?0:s.length;r--&&(o=s[r],!w.relative[a=o.type]);)if((l=w.find[a])&&(i=l(o.matches[0].replace(K,tt),J.test(s[0].type)&&gt(e.parentNode)||e))){if(s.splice(r,1),!(t=i.length&&vt(s)))return N.apply(n,i),n;break}}return(u||h(t,c))(i,e,!T,n,!e||J.test(t)&&gt(e.parentNode)||e),n},d.sortStable=E.split("").sort(S).join("")===E,d.detectDuplicates=!!u,b(),d.sortDetached=lt(function(t){return 1&t.compareDocumentPosition(C.createElement("fieldset"))}),lt(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||ut("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),d.attributes&&lt(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||ut("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),lt(function(t){return null==t.getAttribute("disabled")})||ut(z,function(t,e,n){var i;if(!n)return!0===t[e]?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null}),st}(C);E.find=f,E.expr=f.selectors,E.expr[":"]=E.expr.pseudos,E.uniqueSort=E.unique=f.uniqueSort,E.text=f.getText,E.isXMLDoc=f.isXML,E.contains=f.contains,E.escapeSelector=f.escape;var b=function(t,e,n){for(var i=[],r=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(r&&E(t).is(n))break;i.push(t)}return i},D=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},k=E.expr.match.needsContext;function S(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var $=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function j(t,n,i){return y(n)?E.grep(t,function(t,e){return!!n.call(t,e,t)!==i}):n.nodeType?E.grep(t,function(t){return t===n!==i}):"string"!=typeof n?E.grep(t,function(t){return-1<r.call(n,t)!==i}):E.filter(n,t,i)}E.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?E.find.matchesSelector(i,t)?[i]:[]:E.find.matches(t,E.grep(e,function(t){return 1===t.nodeType}))},E.fn.extend({find:function(t){var e,n,i=this.length,r=this;if("string"!=typeof t)return this.pushStack(E(t).filter(function(){for(e=0;e<i;e++)if(E.contains(r[e],this))return!0}));for(n=this.pushStack([]),e=0;e<i;e++)E.find(t,r[e],n);return 1<i?E.uniqueSort(n):n},filter:function(t){return this.pushStack(j(this,t||[],!1))},not:function(t){return this.pushStack(j(this,t||[],!0))},is:function(t){return!!j(this,"string"==typeof t&&k.test(t)?E(t):t||[],!1).length}});var A,N=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(E.fn.init=function(t,e,n){var i,r;if(!t)return this;if(n=n||A,"string"!=typeof t)return t.nodeType?(this[0]=t,this.length=1,this):y(t)?void 0!==n.ready?n.ready(t):t(E):E.makeArray(t,this);if(!(i="<"===t[0]&&">"===t[t.length-1]&&3<=t.length?[null,t,null]:N.exec(t))||!i[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(i[1]){if(e=e instanceof E?e[0]:e,E.merge(this,E.parseHTML(i[1],e&&e.nodeType?e.ownerDocument||e:T,!0)),$.test(i[1])&&E.isPlainObject(e))for(i in e)y(this[i])?this[i](e[i]):this.attr(i,e[i]);return this}return(r=T.getElementById(i[2]))&&(this[0]=r,this.length=1),this}).prototype=E.fn,A=E(T);var L=/^(?:parents|prev(?:Until|All))/,q={children:!0,contents:!0,next:!0,prev:!0};function z(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}E.fn.extend({has:function(t){var e=E(t,this),n=e.length;return this.filter(function(){for(var t=0;t<n;t++)if(E.contains(this,e[t]))return!0})},closest:function(t,e){var n,i=0,r=this.length,s=[],o="string"!=typeof t&&E(t);if(!k.test(t))for(;i<r;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(o?-1<o.index(n):1===n.nodeType&&E.find.matchesSelector(n,t))){s.push(n);break}return this.pushStack(1<s.length?E.uniqueSort(s):s)},index:function(t){return t?"string"==typeof t?r.call(E(t),this[0]):r.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(E.uniqueSort(E.merge(this.get(),E(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),E.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return b(t,"parentNode")},parentsUntil:function(t,e,n){return b(t,"parentNode",n)},next:function(t){return z(t,"nextSibling")},prev:function(t){return z(t,"previousSibling")},nextAll:function(t){return b(t,"nextSibling")},prevAll:function(t){return b(t,"previousSibling")},nextUntil:function(t,e,n){return b(t,"nextSibling",n)},prevUntil:function(t,e,n){return b(t,"previousSibling",n)},siblings:function(t){return D((t.parentNode||{}).firstChild,t)},children:function(t){return D(t.firstChild)},contents:function(t){return S(t,"iframe")?t.contentDocument:(S(t,"template")&&(t=t.content||t),E.merge([],t.childNodes))}},function(i,r){E.fn[i]=function(t,e){var n=E.map(this,r,t);return"Until"!==i.slice(-5)&&(e=t),e&&"string"==typeof e&&(n=E.filter(e,n)),1<this.length&&(q[i]||E.uniqueSort(n),L.test(i)&&n.reverse()),this.pushStack(n)}});var H=/[^\x20\t\r\n\f]+/g;function P(t){return t}function O(t){throw t}function M(t,e,n,i){var r;try{t&&y(r=t.promise)?r.call(t).done(e).fail(n):t&&y(r=t.then)?r.call(t,e,n):e.apply(void 0,[t].slice(i))}catch(t){n.apply(void 0,[t])}}E.Callbacks=function(i){var t,n;i="string"==typeof i?(t=i,n={},E.each(t.match(H)||[],function(t,e){n[e]=!0}),n):E.extend({},i);var r,e,s,o,a=[],l=[],u=-1,c=function(){for(o=o||i.once,s=r=!0;l.length;u=-1)for(e=l.shift();++u<a.length;)!1===a[u].apply(e[0],e[1])&&i.stopOnFalse&&(u=a.length,e=!1);i.memory||(e=!1),r=!1,o&&(a=e?[]:"")},h={add:function(){return a&&(e&&!r&&(u=a.length-1,l.push(e)),function n(t){E.each(t,function(t,e){y(e)?i.unique&&h.has(e)||a.push(e):e&&e.length&&"string"!==_(e)&&n(e)})}(arguments),e&&!r&&c()),this},remove:function(){return E.each(arguments,function(t,e){for(var n;-1<(n=E.inArray(e,a,n));)a.splice(n,1),n<=u&&u--}),this},has:function(t){return t?-1<E.inArray(t,a):0<a.length},empty:function(){return a&&(a=[]),this},disable:function(){return o=l=[],a=e="",this},disabled:function(){return!a},lock:function(){return o=l=[],e||r||(a=e=""),this},locked:function(){return!!o},fireWith:function(t,e){return o||(e=[t,(e=e||[]).slice?e.slice():e],l.push(e),r||c()),this},fire:function(){return h.fireWith(this,arguments),this},fired:function(){return!!s}};return h},E.extend({Deferred:function(t){var s=[["notify","progress",E.Callbacks("memory"),E.Callbacks("memory"),2],["resolve","done",E.Callbacks("once memory"),E.Callbacks("once memory"),0,"resolved"],["reject","fail",E.Callbacks("once memory"),E.Callbacks("once memory"),1,"rejected"]],r="pending",o={state:function(){return r},always:function(){return a.done(arguments).fail(arguments),this},catch:function(t){return o.then(null,t)},pipe:function(){var r=arguments;return E.Deferred(function(i){E.each(s,function(t,e){var n=y(r[e[4]])&&r[e[4]];a[e[1]](function(){var t=n&&n.apply(this,arguments);t&&y(t.promise)?t.promise().progress(i.notify).done(i.resolve).fail(i.reject):i[e[0]+"With"](this,n?[t]:arguments)})}),r=null}).promise()},then:function(e,n,i){var l=0;function u(r,s,o,a){return function(){var n=this,i=arguments,t=function(){var t,e;if(!(r<l)){if((t=o.apply(n,i))===s.promise())throw new TypeError("Thenable self-resolution");e=t&&("object"==typeof t||"function"==typeof t)&&t.then,y(e)?a?e.call(t,u(l,s,P,a),u(l,s,O,a)):(l++,e.call(t,u(l,s,P,a),u(l,s,O,a),u(l,s,P,s.notifyWith))):(o!==P&&(n=void 0,i=[t]),(a||s.resolveWith)(n,i))}},e=a?t:function(){try{t()}catch(t){E.Deferred.exceptionHook&&E.Deferred.exceptionHook(t,e.stackTrace),l<=r+1&&(o!==O&&(n=void 0,i=[t]),s.rejectWith(n,i))}};r?e():(E.Deferred.getStackHook&&(e.stackTrace=E.Deferred.getStackHook()),C.setTimeout(e))}}return E.Deferred(function(t){s[0][3].add(u(0,t,y(i)?i:P,t.notifyWith)),s[1][3].add(u(0,t,y(e)?e:P)),s[2][3].add(u(0,t,y(n)?n:O))}).promise()},promise:function(t){return null!=t?E.extend(t,o):o}},a={};return E.each(s,function(t,e){var n=e[2],i=e[5];o[e[1]]=n.add,i&&n.add(function(){r=i},s[3-t][2].disable,s[3-t][3].disable,s[0][2].lock,s[0][3].lock),n.add(e[3].fire),a[e[0]]=function(){return a[e[0]+"With"](this===a?void 0:this,arguments),this},a[e[0]+"With"]=n.fireWith}),o.promise(a),t&&t.call(a,a),a},when:function(t){var n=arguments.length,e=n,i=Array(e),r=a.call(arguments),s=E.Deferred(),o=function(e){return function(t){i[e]=this,r[e]=1<arguments.length?a.call(arguments):t,--n||s.resolveWith(i,r)}};if(n<=1&&(M(t,s.done(o(e)).resolve,s.reject,!n),"pending"===s.state()||y(r[e]&&r[e].then)))return s.then();for(;e--;)M(r[e],o(e),s.reject);return s.promise()}});var R=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;E.Deferred.exceptionHook=function(t,e){C.console&&C.console.warn&&t&&R.test(t.name)&&C.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},E.readyException=function(t){C.setTimeout(function(){throw t})};var I=E.Deferred();function W(){T.removeEventListener("DOMContentLoaded",W),C.removeEventListener("load",W),E.ready()}E.fn.ready=function(t){return I.then(t).catch(function(t){E.readyException(t)}),this},E.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--E.readyWait:E.isReady)||(E.isReady=!0)!==t&&0<--E.readyWait||I.resolveWith(T,[E])}}),E.ready.then=I.then,"complete"===T.readyState||"loading"!==T.readyState&&!T.documentElement.doScroll?C.setTimeout(E.ready):(T.addEventListener("DOMContentLoaded",W),C.addEventListener("load",W));var B=function(t,e,n,i,r,s,o){var a=0,l=t.length,u=null==n;if("object"===_(n))for(a in r=!0,n)B(t,e,a,n[a],!0,s,o);else if(void 0!==i&&(r=!0,y(i)||(o=!0),u&&(e=o?(e.call(t,i),null):(u=e,function(t,e,n){return u.call(E(t),n)})),e))for(;a<l;a++)e(t[a],n,o?i:i.call(t[a],a,e(t[a],n)));return r?t:u?e.call(t):l?e(t[0],n):s},F=/^-ms-/,U=/-([a-z])/g;function X(t,e){return e.toUpperCase()}function V(t){return t.replace(F,"ms-").replace(U,X)}var Q=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function G(){this.expando=E.expando+G.uid++}G.uid=1,G.prototype={cache:function(t){var e=t[this.expando];return e||(e={},Q(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var i,r=this.cache(t);if("string"==typeof e)r[V(e)]=n;else for(i in e)r[V(i)]=e[i];return r},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][V(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,i=t[this.expando];if(void 0!==i){if(void 0!==e){n=(e=Array.isArray(e)?e.map(V):(e=V(e))in i?[e]:e.match(H)||[]).length;for(;n--;)delete i[e[n]]}(void 0===e||E.isEmptyObject(i))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!E.isEmptyObject(e)}};var Y=new G,Z=new G,J=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,K=/[A-Z]/g;function tt(t,e,n){var i,r;if(void 0===n&&1===t.nodeType)if(i="data-"+e.replace(K,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(i))){try{n="true"===(r=n)||"false"!==r&&("null"===r?null:r===+r+""?+r:J.test(r)?JSON.parse(r):r)}catch(t){}Z.set(t,e,n)}else n=void 0;return n}E.extend({hasData:function(t){return Z.hasData(t)||Y.hasData(t)},data:function(t,e,n){return Z.access(t,e,n)},removeData:function(t,e){Z.remove(t,e)},_data:function(t,e,n){return Y.access(t,e,n)},_removeData:function(t,e){Y.remove(t,e)}}),E.fn.extend({data:function(n,t){var e,i,r,s=this[0],o=s&&s.attributes;if(void 0!==n)return"object"==typeof n?this.each(function(){Z.set(this,n)}):B(this,function(t){var e;if(s&&void 0===t)return void 0!==(e=Z.get(s,n))?e:void 0!==(e=tt(s,n))?e:void 0;this.each(function(){Z.set(this,n,t)})},null,t,1<arguments.length,null,!0);if(this.length&&(r=Z.get(s),1===s.nodeType&&!Y.get(s,"hasDataAttrs"))){for(e=o.length;e--;)o[e]&&0===(i=o[e].name).indexOf("data-")&&(i=V(i.slice(5)),tt(s,i,r[i]));Y.set(s,"hasDataAttrs",!0)}return r},removeData:function(t){return this.each(function(){Z.remove(this,t)})}}),E.extend({queue:function(t,e,n){var i;if(t)return e=(e||"fx")+"queue",i=Y.get(t,e),n&&(!i||Array.isArray(n)?i=Y.access(t,e,E.makeArray(n)):i.push(n)),i||[]},dequeue:function(t,e){e=e||"fx";var n=E.queue(t,e),i=n.length,r=n.shift(),s=E._queueHooks(t,e);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===e&&n.unshift("inprogress"),delete s.stop,r.call(t,function(){E.dequeue(t,e)},s)),!i&&s&&s.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return Y.get(t,n)||Y.access(t,n,{empty:E.Callbacks("once memory").add(function(){Y.remove(t,[e+"queue",n])})})}}),E.fn.extend({queue:function(e,n){var t=2;return"string"!=typeof e&&(n=e,e="fx",t--),arguments.length<t?E.queue(this[0],e):void 0===n?this:this.each(function(){var t=E.queue(this,e,n);E._queueHooks(this,e),"fx"===e&&"inprogress"!==t[0]&&E.dequeue(this,e)})},dequeue:function(t){return this.each(function(){E.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,r=E.Deferred(),s=this,o=this.length,a=function(){--i||r.resolveWith(s,[s])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";o--;)(n=Y.get(s[o],t+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),r.promise(e)}});var et=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,nt=new RegExp("^(?:([+-])=|)("+et+")([a-z%]*)$","i"),it=["Top","Right","Bottom","Left"],rt=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&E.contains(t.ownerDocument,t)&&"none"===E.css(t,"display")},st=function(t,e,n,i){var r,s,o={};for(s in e)o[s]=t.style[s],t.style[s]=e[s];for(s in r=n.apply(t,i||[]),e)t.style[s]=o[s];return r};function ot(t,e,n,i){var r,s,o=20,a=i?function(){return i.cur()}:function(){return E.css(t,e,"")},l=a(),u=n&&n[3]||(E.cssNumber[e]?"":"px"),c=(E.cssNumber[e]||"px"!==u&&+l)&&nt.exec(E.css(t,e));if(c&&c[3]!==u){for(l/=2,u=u||c[3],c=+l||1;o--;)E.style(t,e,c+u),(1-s)*(1-(s=a()/l||.5))<=0&&(o=0),c/=s;c*=2,E.style(t,e,c+u),n=n||[]}return n&&(c=+c||+l||0,r=n[1]?c+(n[1]+1)*n[2]:+n[2],i&&(i.unit=u,i.start=c,i.end=r)),r}var at={};function lt(t,e){for(var n,i,r,s,o,a,l,u=[],c=0,h=t.length;c<h;c++)(i=t[c]).style&&(n=i.style.display,e?("none"===n&&(u[c]=Y.get(i,"display")||null,u[c]||(i.style.display="")),""===i.style.display&&rt(i)&&(u[c]=(l=o=s=void 0,o=(r=i).ownerDocument,a=r.nodeName,(l=at[a])||(s=o.body.appendChild(o.createElement(a)),l=E.css(s,"display"),s.parentNode.removeChild(s),"none"===l&&(l="block"),at[a]=l)))):"none"!==n&&(u[c]="none",Y.set(i,"display",n)));for(c=0;c<h;c++)null!=u[c]&&(t[c].style.display=u[c]);return t}E.fn.extend({show:function(){return lt(this,!0)},hide:function(){return lt(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){rt(this)?E(this).show():E(this).hide()})}});var ut=/^(?:checkbox|radio)$/i,ct=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,ht=/^$|^module$|\/(?:java|ecma)script/i,pt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function dt(t,e){var n;return n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&S(t,e)?E.merge([t],n):n}function ft(t,e){for(var n=0,i=t.length;n<i;n++)Y.set(t[n],"globalEval",!e||Y.get(e[n],"globalEval"))}pt.optgroup=pt.option,pt.tbody=pt.tfoot=pt.colgroup=pt.caption=pt.thead,pt.th=pt.td;var gt,mt,vt=/<|&#?\w+;/;function yt(t,e,n,i,r){for(var s,o,a,l,u,c,h=e.createDocumentFragment(),p=[],d=0,f=t.length;d<f;d++)if((s=t[d])||0===s)if("object"===_(s))E.merge(p,s.nodeType?[s]:s);else if(vt.test(s)){for(o=o||h.appendChild(e.createElement("div")),a=(ct.exec(s)||["",""])[1].toLowerCase(),l=pt[a]||pt._default,o.innerHTML=l[1]+E.htmlPrefilter(s)+l[2],c=l[0];c--;)o=o.lastChild;E.merge(p,o.childNodes),(o=h.firstChild).textContent=""}else p.push(e.createTextNode(s));for(h.textContent="",d=0;s=p[d++];)if(i&&-1<E.inArray(s,i))r&&r.push(s);else if(u=E.contains(s.ownerDocument,s),o=dt(h.appendChild(s),"script"),u&&ft(o),n)for(c=0;s=o[c++];)ht.test(s.type||"")&&n.push(s);return h}gt=T.createDocumentFragment().appendChild(T.createElement("div")),(mt=T.createElement("input")).setAttribute("type","radio"),mt.setAttribute("checked","checked"),mt.setAttribute("name","t"),gt.appendChild(mt),v.checkClone=gt.cloneNode(!0).cloneNode(!0).lastChild.checked,gt.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!gt.cloneNode(!0).lastChild.defaultValue;var xt=T.documentElement,wt=/^key/,_t=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,bt=/^([^.]*)(?:\.(.+)|)/;function Ct(){return!0}function Tt(){return!1}function Et(){try{return T.activeElement}catch(t){}}function Dt(t,e,n,i,r,s){var o,a;if("object"==typeof e){for(a in"string"!=typeof n&&(i=i||n,n=void 0),e)Dt(t,a,n,i,e[a],s);return t}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=Tt;else if(!r)return t;return 1===s&&(o=r,(r=function(t){return E().off(t),o.apply(this,arguments)}).guid=o.guid||(o.guid=E.guid++)),t.each(function(){E.event.add(this,e,r,i,n)})}E.event={global:{},add:function(e,t,n,i,r){var s,o,a,l,u,c,h,p,d,f,g,m=Y.get(e);if(m)for(n.handler&&(n=(s=n).handler,r=s.selector),r&&E.find.matchesSelector(xt,r),n.guid||(n.guid=E.guid++),(l=m.events)||(l=m.events={}),(o=m.handle)||(o=m.handle=function(t){return void 0!==E&&E.event.triggered!==t.type?E.event.dispatch.apply(e,arguments):void 0}),u=(t=(t||"").match(H)||[""]).length;u--;)d=g=(a=bt.exec(t[u])||[])[1],f=(a[2]||"").split(".").sort(),d&&(h=E.event.special[d]||{},d=(r?h.delegateType:h.bindType)||d,h=E.event.special[d]||{},c=E.extend({type:d,origType:g,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&E.expr.match.needsContext.test(r),namespace:f.join(".")},s),(p=l[d])||((p=l[d]=[]).delegateCount=0,h.setup&&!1!==h.setup.call(e,i,f,o)||e.addEventListener&&e.addEventListener(d,o)),h.add&&(h.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),r?p.splice(p.delegateCount++,0,c):p.push(c),E.event.global[d]=!0)},remove:function(t,e,n,i,r){var s,o,a,l,u,c,h,p,d,f,g,m=Y.hasData(t)&&Y.get(t);if(m&&(l=m.events)){for(u=(e=(e||"").match(H)||[""]).length;u--;)if(d=g=(a=bt.exec(e[u])||[])[1],f=(a[2]||"").split(".").sort(),d){for(h=E.event.special[d]||{},p=l[d=(i?h.delegateType:h.bindType)||d]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),o=s=p.length;s--;)c=p[s],!r&&g!==c.origType||n&&n.guid!==c.guid||a&&!a.test(c.namespace)||i&&i!==c.selector&&("**"!==i||!c.selector)||(p.splice(s,1),c.selector&&p.delegateCount--,h.remove&&h.remove.call(t,c));o&&!p.length&&(h.teardown&&!1!==h.teardown.call(t,f,m.handle)||E.removeEvent(t,d,m.handle),delete l[d])}else for(d in l)E.event.remove(t,d+e[u],n,i,!0);E.isEmptyObject(l)&&Y.remove(t,"handle events")}},dispatch:function(t){var e,n,i,r,s,o,a=E.event.fix(t),l=new Array(arguments.length),u=(Y.get(this,"events")||{})[a.type]||[],c=E.event.special[a.type]||{};for(l[0]=a,e=1;e<arguments.length;e++)l[e]=arguments[e];if(a.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,a)){for(o=E.event.handlers.call(this,a,u),e=0;(r=o[e++])&&!a.isPropagationStopped();)for(a.currentTarget=r.elem,n=0;(s=r.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(s.namespace)||(a.handleObj=s,a.data=s.data,void 0!==(i=((E.event.special[s.origType]||{}).handle||s.handler).apply(r.elem,l))&&!1===(a.result=i)&&(a.preventDefault(),a.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,a),a.result}},handlers:function(t,e){var n,i,r,s,o,a=[],l=e.delegateCount,u=t.target;if(l&&u.nodeType&&!("click"===t.type&&1<=t.button))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==t.type||!0!==u.disabled)){for(s=[],o={},n=0;n<l;n++)void 0===o[r=(i=e[n]).selector+" "]&&(o[r]=i.needsContext?-1<E(r,this).index(u):E.find(r,this,null,[u]).length),o[r]&&s.push(i);s.length&&a.push({elem:u,handlers:s})}return u=this,l<e.length&&a.push({elem:u,handlers:e.slice(l)}),a},addProp:function(e,t){Object.defineProperty(E.Event.prototype,e,{enumerable:!0,configurable:!0,get:y(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(t){return t[E.expando]?t:new E.Event(t)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==Et()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===Et()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&S(this,"input"))return this.click(),!1},_default:function(t){return S(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},E.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},E.Event=function(t,e){if(!(this instanceof E.Event))return new E.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?Ct:Tt,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&E.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[E.expando]=!0},E.Event.prototype={constructor:E.Event,isDefaultPrevented:Tt,isPropagationStopped:Tt,isImmediatePropagationStopped:Tt,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=Ct,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=Ct,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=Ct,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},E.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&wt.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&_t.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},E.event.addProp),E.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,r){E.event.special[t]={delegateType:r,bindType:r,handle:function(t){var e,n=t.relatedTarget,i=t.handleObj;return n&&(n===this||E.contains(this,n))||(t.type=i.origType,e=i.handler.apply(this,arguments),t.type=r),e}}}),E.fn.extend({on:function(t,e,n,i){return Dt(this,t,e,n,i)},one:function(t,e,n,i){return Dt(this,t,e,n,i,1)},off:function(t,e,n){var i,r;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,E(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"!=typeof t)return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=Tt),this.each(function(){E.event.remove(this,t,n,e)});for(r in t)this.off(r,e,t[r]);return this}});var kt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,St=/<script|<style|<link/i,$t=/checked\s*(?:[^=]|=\s*.checked.)/i,jt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function At(t,e){return S(t,"table")&&S(11!==e.nodeType?e:e.firstChild,"tr")&&E(t).children("tbody")[0]||t}function Nt(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Lt(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function qt(t,e){var n,i,r,s,o,a,l,u;if(1===e.nodeType){if(Y.hasData(t)&&(s=Y.access(t),o=Y.set(e,s),u=s.events))for(r in delete o.handle,o.events={},u)for(n=0,i=u[r].length;n<i;n++)E.event.add(e,r,u[r][n]);Z.hasData(t)&&(a=Z.access(t),l=E.extend({},a),Z.set(e,l))}}function zt(n,i,r,s){i=g.apply([],i);var t,e,o,a,l,u,c=0,h=n.length,p=h-1,d=i[0],f=y(d);if(f||1<h&&"string"==typeof d&&!v.checkClone&&$t.test(d))return n.each(function(t){var e=n.eq(t);f&&(i[0]=d.call(this,t,e.html())),zt(e,i,r,s)});if(h&&(e=(t=yt(i,n[0].ownerDocument,!1,n,s)).firstChild,1===t.childNodes.length&&(t=e),e||s)){for(a=(o=E.map(dt(t,"script"),Nt)).length;c<h;c++)l=t,c!==p&&(l=E.clone(l,!0,!0),a&&E.merge(o,dt(l,"script"))),r.call(n[c],l,c);if(a)for(u=o[o.length-1].ownerDocument,E.map(o,Lt),c=0;c<a;c++)l=o[c],ht.test(l.type||"")&&!Y.access(l,"globalEval")&&E.contains(u,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?E._evalUrl&&E._evalUrl(l.src):w(l.textContent.replace(jt,""),u,l))}return n}function Ht(t,e,n){for(var i,r=e?E.filter(e,t):t,s=0;null!=(i=r[s]);s++)n||1!==i.nodeType||E.cleanData(dt(i)),i.parentNode&&(n&&E.contains(i.ownerDocument,i)&&ft(dt(i,"script")),i.parentNode.removeChild(i));return t}E.extend({htmlPrefilter:function(t){return t.replace(kt,"<$1></$2>")},clone:function(t,e,n){var i,r,s,o,a,l,u,c=t.cloneNode(!0),h=E.contains(t.ownerDocument,t);if(!(v.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||E.isXMLDoc(t)))for(o=dt(c),i=0,r=(s=dt(t)).length;i<r;i++)a=s[i],l=o[i],void 0,"input"===(u=l.nodeName.toLowerCase())&&ut.test(a.type)?l.checked=a.checked:"input"!==u&&"textarea"!==u||(l.defaultValue=a.defaultValue);if(e)if(n)for(s=s||dt(t),o=o||dt(c),i=0,r=s.length;i<r;i++)qt(s[i],o[i]);else qt(t,c);return 0<(o=dt(c,"script")).length&&ft(o,!h&&dt(t,"script")),c},cleanData:function(t){for(var e,n,i,r=E.event.special,s=0;void 0!==(n=t[s]);s++)if(Q(n)){if(e=n[Y.expando]){if(e.events)for(i in e.events)r[i]?E.event.remove(n,i):E.removeEvent(n,i,e.handle);n[Y.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),E.fn.extend({detach:function(t){return Ht(this,t,!0)},remove:function(t){return Ht(this,t)},text:function(t){return B(this,function(t){return void 0===t?E.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return zt(this,arguments,function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||At(this,t).appendChild(t)})},prepend:function(){return zt(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=At(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return zt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return zt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(E.cleanData(dt(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return E.clone(this,t,e)})},html:function(t){return B(this,function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!St.test(t)&&!pt[(ct.exec(t)||["",""])[1].toLowerCase()]){t=E.htmlPrefilter(t);try{for(;n<i;n++)1===(e=this[n]||{}).nodeType&&(E.cleanData(dt(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var n=[];return zt(this,arguments,function(t){var e=this.parentNode;E.inArray(this,n)<0&&(E.cleanData(dt(this)),e&&e.replaceChild(t,this))},n)}}),E.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,o){E.fn[t]=function(t){for(var e,n=[],i=E(t),r=i.length-1,s=0;s<=r;s++)e=s===r?this:this.clone(!0),E(i[s])[o](e),l.apply(n,e.get());return this.pushStack(n)}});var Pt=new RegExp("^("+et+")(?!px)[a-z%]+$","i"),Ot=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=C),e.getComputedStyle(t)},Mt=new RegExp(it.join("|"),"i");function Rt(t,e,n){var i,r,s,o,a=t.style;return(n=n||Ot(t))&&(""!==(o=n.getPropertyValue(e)||n[e])||E.contains(t.ownerDocument,t)||(o=E.style(t,e)),!v.pixelBoxStyles()&&Pt.test(o)&&Mt.test(e)&&(i=a.width,r=a.minWidth,s=a.maxWidth,a.minWidth=a.maxWidth=a.width=o,o=n.width,a.width=i,a.minWidth=r,a.maxWidth=s)),void 0!==o?o+"":o}function It(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function t(){if(l){a.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",l.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",xt.appendChild(a).appendChild(l);var t=C.getComputedStyle(l);n="1%"!==t.top,o=12===e(t.marginLeft),l.style.right="60%",s=36===e(t.right),i=36===e(t.width),l.style.position="absolute",r=36===l.offsetWidth||"absolute",xt.removeChild(a),l=null}}function e(t){return Math.round(parseFloat(t))}var n,i,r,s,o,a=T.createElement("div"),l=T.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===l.style.backgroundClip,E.extend(v,{boxSizingReliable:function(){return t(),i},pixelBoxStyles:function(){return t(),s},pixelPosition:function(){return t(),n},reliableMarginLeft:function(){return t(),o},scrollboxSize:function(){return t(),r}}))}();var Wt=/^(none|table(?!-c[ea]).+)/,Bt=/^--/,Ft={position:"absolute",visibility:"hidden",display:"block"},Ut={letterSpacing:"0",fontWeight:"400"},Xt=["Webkit","Moz","ms"],Vt=T.createElement("div").style;function Qt(t){var e=E.cssProps[t];return e||(e=E.cssProps[t]=function(t){if(t in Vt)return t;for(var e=t[0].toUpperCase()+t.slice(1),n=Xt.length;n--;)if((t=Xt[n]+e)in Vt)return t}(t)||t),e}function Gt(t,e,n){var i=nt.exec(e);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):e}function Yt(t,e,n,i,r,s){var o="width"===e?1:0,a=0,l=0;if(n===(i?"border":"content"))return 0;for(;o<4;o+=2)"margin"===n&&(l+=E.css(t,n+it[o],!0,r)),i?("content"===n&&(l-=E.css(t,"padding"+it[o],!0,r)),"margin"!==n&&(l-=E.css(t,"border"+it[o]+"Width",!0,r))):(l+=E.css(t,"padding"+it[o],!0,r),"padding"!==n?l+=E.css(t,"border"+it[o]+"Width",!0,r):a+=E.css(t,"border"+it[o]+"Width",!0,r));return!i&&0<=s&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-s-l-a-.5))),l}function Zt(t,e,n){var i=Ot(t),r=Rt(t,e,i),s="border-box"===E.css(t,"boxSizing",!1,i),o=s;if(Pt.test(r)){if(!n)return r;r="auto"}return o=o&&(v.boxSizingReliable()||r===t.style[e]),("auto"===r||!parseFloat(r)&&"inline"===E.css(t,"display",!1,i))&&(r=t["offset"+e[0].toUpperCase()+e.slice(1)],o=!0),(r=parseFloat(r)||0)+Yt(t,e,n||(s?"border":"content"),o,i,r)+"px"}function Jt(t,e,n,i,r){return new Jt.prototype.init(t,e,n,i,r)}E.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=Rt(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var r,s,o,a=V(e),l=Bt.test(e),u=t.style;if(l||(e=Qt(a)),o=E.cssHooks[e]||E.cssHooks[a],void 0===n)return o&&"get"in o&&void 0!==(r=o.get(t,!1,i))?r:u[e];"string"===(s=typeof n)&&(r=nt.exec(n))&&r[1]&&(n=ot(t,e,r),s="number"),null!=n&&n==n&&("number"===s&&(n+=r&&r[3]||(E.cssNumber[a]?"":"px")),v.clearCloneStyle||""!==n||0!==e.indexOf("background")||(u[e]="inherit"),o&&"set"in o&&void 0===(n=o.set(t,n,i))||(l?u.setProperty(e,n):u[e]=n))}},css:function(t,e,n,i){var r,s,o,a=V(e);return Bt.test(e)||(e=Qt(a)),(o=E.cssHooks[e]||E.cssHooks[a])&&"get"in o&&(r=o.get(t,!0,n)),void 0===r&&(r=Rt(t,e,i)),"normal"===r&&e in Ut&&(r=Ut[e]),""===n||n?(s=parseFloat(r),!0===n||isFinite(s)?s||0:r):r}}),E.each(["height","width"],function(t,a){E.cssHooks[a]={get:function(t,e,n){if(e)return!Wt.test(E.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?Zt(t,a,n):st(t,Ft,function(){return Zt(t,a,n)})},set:function(t,e,n){var i,r=Ot(t),s="border-box"===E.css(t,"boxSizing",!1,r),o=n&&Yt(t,a,n,s,r);return s&&v.scrollboxSize()===r.position&&(o-=Math.ceil(t["offset"+a[0].toUpperCase()+a.slice(1)]-parseFloat(r[a])-Yt(t,a,"border",!1,r)-.5)),o&&(i=nt.exec(e))&&"px"!==(i[3]||"px")&&(t.style[a]=e,e=E.css(t,a)),Gt(0,e,o)}}}),E.cssHooks.marginLeft=It(v.reliableMarginLeft,function(t,e){if(e)return(parseFloat(Rt(t,"marginLeft"))||t.getBoundingClientRect().left-st(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),E.each({margin:"",padding:"",border:"Width"},function(r,s){E.cssHooks[r+s]={expand:function(t){for(var e=0,n={},i="string"==typeof t?t.split(" "):[t];e<4;e++)n[r+it[e]+s]=i[e]||i[e-2]||i[0];return n}},"margin"!==r&&(E.cssHooks[r+s].set=Gt)}),E.fn.extend({css:function(t,e){return B(this,function(t,e,n){var i,r,s={},o=0;if(Array.isArray(e)){for(i=Ot(t),r=e.length;o<r;o++)s[e[o]]=E.css(t,e[o],!1,i);return s}return void 0!==n?E.style(t,e,n):E.css(t,e)},t,e,1<arguments.length)}}),((E.Tween=Jt).prototype={constructor:Jt,init:function(t,e,n,i,r,s){this.elem=t,this.prop=n,this.easing=r||E.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=s||(E.cssNumber[n]?"":"px")},cur:function(){var t=Jt.propHooks[this.prop];return t&&t.get?t.get(this):Jt.propHooks._default.get(this)},run:function(t){var e,n=Jt.propHooks[this.prop];return this.options.duration?this.pos=e=E.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):Jt.propHooks._default.set(this),this}}).init.prototype=Jt.prototype,(Jt.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=E.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){E.fx.step[t.prop]?E.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[E.cssProps[t.prop]]&&!E.cssHooks[t.prop]?t.elem[t.prop]=t.now:E.style(t.elem,t.prop,t.now+t.unit)}}}).scrollTop=Jt.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},E.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},E.fx=Jt.prototype.init,E.fx.step={};var Kt,te,ee,ne,ie=/^(?:toggle|show|hide)$/,re=/queueHooks$/;function se(){te&&(!1===T.hidden&&C.requestAnimationFrame?C.requestAnimationFrame(se):C.setTimeout(se,E.fx.interval),E.fx.tick())}function oe(){return C.setTimeout(function(){Kt=void 0}),Kt=Date.now()}function ae(t,e){var n,i=0,r={height:t};for(e=e?1:0;i<4;i+=2-e)r["margin"+(n=it[i])]=r["padding"+n]=t;return e&&(r.opacity=r.width=t),r}function le(t,e,n){for(var i,r=(ue.tweeners[e]||[]).concat(ue.tweeners["*"]),s=0,o=r.length;s<o;s++)if(i=r[s].call(n,e,t))return i}function ue(s,t,e){var n,o,i=0,r=ue.prefilters.length,a=E.Deferred().always(function(){delete l.elem}),l=function(){if(o)return!1;for(var t=Kt||oe(),e=Math.max(0,u.startTime+u.duration-t),n=1-(e/u.duration||0),i=0,r=u.tweens.length;i<r;i++)u.tweens[i].run(n);return a.notifyWith(s,[u,n,e]),n<1&&r?e:(r||a.notifyWith(s,[u,1,0]),a.resolveWith(s,[u]),!1)},u=a.promise({elem:s,props:E.extend({},t),opts:E.extend(!0,{specialEasing:{},easing:E.easing._default},e),originalProperties:t,originalOptions:e,startTime:Kt||oe(),duration:e.duration,tweens:[],createTween:function(t,e){var n=E.Tween(s,u.opts,t,e,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(n),n},stop:function(t){var e=0,n=t?u.tweens.length:0;if(o)return this;for(o=!0;e<n;e++)u.tweens[e].run(1);return t?(a.notifyWith(s,[u,1,0]),a.resolveWith(s,[u,t])):a.rejectWith(s,[u,t]),this}}),c=u.props;for(!function(t,e){var n,i,r,s,o;for(n in t)if(r=e[i=V(n)],s=t[n],Array.isArray(s)&&(r=s[1],s=t[n]=s[0]),n!==i&&(t[i]=s,delete t[n]),(o=E.cssHooks[i])&&"expand"in o)for(n in s=o.expand(s),delete t[i],s)n in t||(t[n]=s[n],e[n]=r);else e[i]=r}(c,u.opts.specialEasing);i<r;i++)if(n=ue.prefilters[i].call(u,s,c,u.opts))return y(n.stop)&&(E._queueHooks(u.elem,u.opts.queue).stop=n.stop.bind(n)),n;return E.map(c,le,u),y(u.opts.start)&&u.opts.start.call(s,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),E.fx.timer(E.extend(l,{elem:s,anim:u,queue:u.opts.queue})),u}E.Animation=E.extend(ue,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return ot(n.elem,t,nt.exec(e),n),n}]},tweener:function(t,e){for(var n,i=0,r=(t=y(t)?(e=t,["*"]):t.match(H)).length;i<r;i++)n=t[i],ue.tweeners[n]=ue.tweeners[n]||[],ue.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var i,r,s,o,a,l,u,c,h="width"in e||"height"in e,p=this,d={},f=t.style,g=t.nodeType&&rt(t),m=Y.get(t,"fxshow");for(i in n.queue||(null==(o=E._queueHooks(t,"fx")).unqueued&&(o.unqueued=0,a=o.empty.fire,o.empty.fire=function(){o.unqueued||a()}),o.unqueued++,p.always(function(){p.always(function(){o.unqueued--,E.queue(t,"fx").length||o.empty.fire()})})),e)if(r=e[i],ie.test(r)){if(delete e[i],s=s||"toggle"===r,r===(g?"hide":"show")){if("show"!==r||!m||void 0===m[i])continue;g=!0}d[i]=m&&m[i]||E.style(t,i)}if((l=!E.isEmptyObject(e))||!E.isEmptyObject(d))for(i in h&&1===t.nodeType&&(n.overflow=[f.overflow,f.overflowX,f.overflowY],null==(u=m&&m.display)&&(u=Y.get(t,"display")),"none"===(c=E.css(t,"display"))&&(u?c=u:(lt([t],!0),u=t.style.display||u,c=E.css(t,"display"),lt([t]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===E.css(t,"float")&&(l||(p.done(function(){f.display=u}),null==u&&(c=f.display,u="none"===c?"":c)),f.display="inline-block")),n.overflow&&(f.overflow="hidden",p.always(function(){f.overflow=n.overflow[0],f.overflowX=n.overflow[1],f.overflowY=n.overflow[2]})),l=!1,d)l||(m?"hidden"in m&&(g=m.hidden):m=Y.access(t,"fxshow",{display:u}),s&&(m.hidden=!g),g&&lt([t],!0),p.done(function(){for(i in g||lt([t]),Y.remove(t,"fxshow"),d)E.style(t,i,d[i])})),l=le(g?m[i]:0,i,p),i in m||(m[i]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(t,e){e?ue.prefilters.unshift(t):ue.prefilters.push(t)}}),E.speed=function(t,e,n){var i=t&&"object"==typeof t?E.extend({},t):{complete:n||!n&&e||y(t)&&t,duration:t,easing:n&&e||e&&!y(e)&&e};return E.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in E.fx.speeds?i.duration=E.fx.speeds[i.duration]:i.duration=E.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){y(i.old)&&i.old.call(this),i.queue&&E.dequeue(this,i.queue)},i},E.fn.extend({fadeTo:function(t,e,n,i){return this.filter(rt).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(e,t,n,i){var r=E.isEmptyObject(e),s=E.speed(t,n,i),o=function(){var t=ue(this,E.extend({},e),s);(r||Y.get(this,"finish"))&&t.stop(!0)};return o.finish=o,r||!1===s.queue?this.each(o):this.queue(s.queue,o)},stop:function(r,t,s){var o=function(t){var e=t.stop;delete t.stop,e(s)};return"string"!=typeof r&&(s=t,t=r,r=void 0),t&&!1!==r&&this.queue(r||"fx",[]),this.each(function(){var t=!0,e=null!=r&&r+"queueHooks",n=E.timers,i=Y.get(this);if(e)i[e]&&i[e].stop&&o(i[e]);else for(e in i)i[e]&&i[e].stop&&re.test(e)&&o(i[e]);for(e=n.length;e--;)n[e].elem!==this||null!=r&&n[e].queue!==r||(n[e].anim.stop(s),t=!1,n.splice(e,1));!t&&s||E.dequeue(this,r)})},finish:function(o){return!1!==o&&(o=o||"fx"),this.each(function(){var t,e=Y.get(this),n=e[o+"queue"],i=e[o+"queueHooks"],r=E.timers,s=n?n.length:0;for(e.finish=!0,E.queue(this,o,[]),i&&i.stop&&i.stop.call(this,!0),t=r.length;t--;)r[t].elem===this&&r[t].queue===o&&(r[t].anim.stop(!0),r.splice(t,1));for(t=0;t<s;t++)n[t]&&n[t].finish&&n[t].finish.call(this);delete e.finish})}}),E.each(["toggle","show","hide"],function(t,i){var r=E.fn[i];E.fn[i]=function(t,e,n){return null==t||"boolean"==typeof t?r.apply(this,arguments):this.animate(ae(i,!0),t,e,n)}}),E.each({slideDown:ae("show"),slideUp:ae("hide"),slideToggle:ae("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,i){E.fn[t]=function(t,e,n){return this.animate(i,t,e,n)}}),E.timers=[],E.fx.tick=function(){var t,e=0,n=E.timers;for(Kt=Date.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||E.fx.stop(),Kt=void 0},E.fx.timer=function(t){E.timers.push(t),E.fx.start()},E.fx.interval=13,E.fx.start=function(){te||(te=!0,se())},E.fx.stop=function(){te=null},E.fx.speeds={slow:600,fast:200,_default:400},E.fn.delay=function(i,t){return i=E.fx&&E.fx.speeds[i]||i,t=t||"fx",this.queue(t,function(t,e){var n=C.setTimeout(t,i);e.stop=function(){C.clearTimeout(n)}})},ee=T.createElement("input"),ne=T.createElement("select").appendChild(T.createElement("option")),ee.type="checkbox",v.checkOn=""!==ee.value,v.optSelected=ne.selected,(ee=T.createElement("input")).value="t",ee.type="radio",v.radioValue="t"===ee.value;var ce,he=E.expr.attrHandle;E.fn.extend({attr:function(t,e){return B(this,E.attr,t,e,1<arguments.length)},removeAttr:function(t){return this.each(function(){E.removeAttr(this,t)})}}),E.extend({attr:function(t,e,n){var i,r,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return void 0===t.getAttribute?E.prop(t,e,n):(1===s&&E.isXMLDoc(t)||(r=E.attrHooks[e.toLowerCase()]||(E.expr.match.bool.test(e)?ce:void 0)),void 0!==n?null===n?void E.removeAttr(t,e):r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:(t.setAttribute(e,n+""),n):r&&"get"in r&&null!==(i=r.get(t,e))?i:null==(i=E.find.attr(t,e))?void 0:i)},attrHooks:{type:{set:function(t,e){if(!v.radioValue&&"radio"===e&&S(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,i=0,r=e&&e.match(H);if(r&&1===t.nodeType)for(;n=r[i++];)t.removeAttribute(n)}}),ce={set:function(t,e,n){return!1===e?E.removeAttr(t,n):t.setAttribute(n,n),n}},E.each(E.expr.match.bool.source.match(/\w+/g),function(t,e){var o=he[e]||E.find.attr;he[e]=function(t,e,n){var i,r,s=e.toLowerCase();return n||(r=he[s],he[s]=i,i=null!=o(t,e,n)?s:null,he[s]=r),i}});var pe=/^(?:input|select|textarea|button)$/i,de=/^(?:a|area)$/i;function fe(t){return(t.match(H)||[]).join(" ")}function ge(t){return t.getAttribute&&t.getAttribute("class")||""}function me(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(H)||[]}E.fn.extend({prop:function(t,e){return B(this,E.prop,t,e,1<arguments.length)},removeProp:function(t){return this.each(function(){delete this[E.propFix[t]||t]})}}),E.extend({prop:function(t,e,n){var i,r,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return 1===s&&E.isXMLDoc(t)||(e=E.propFix[e]||e,r=E.propHooks[e]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:t[e]=n:r&&"get"in r&&null!==(i=r.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){var e=E.find.attr(t,"tabindex");return e?parseInt(e,10):pe.test(t.nodeName)||de.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(E.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),E.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){E.propFix[this.toLowerCase()]=this}),E.fn.extend({addClass:function(e){var t,n,i,r,s,o,a,l=0;if(y(e))return this.each(function(t){E(this).addClass(e.call(this,t,ge(this)))});if((t=me(e)).length)for(;n=this[l++];)if(r=ge(n),i=1===n.nodeType&&" "+fe(r)+" "){for(o=0;s=t[o++];)i.indexOf(" "+s+" ")<0&&(i+=s+" ");r!==(a=fe(i))&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,i,r,s,o,a,l=0;if(y(e))return this.each(function(t){E(this).removeClass(e.call(this,t,ge(this)))});if(!arguments.length)return this.attr("class","");if((t=me(e)).length)for(;n=this[l++];)if(r=ge(n),i=1===n.nodeType&&" "+fe(r)+" "){for(o=0;s=t[o++];)for(;-1<i.indexOf(" "+s+" ");)i=i.replace(" "+s+" "," ");r!==(a=fe(i))&&n.setAttribute("class",a)}return this},toggleClass:function(r,e){var s=typeof r,o="string"===s||Array.isArray(r);return"boolean"==typeof e&&o?e?this.addClass(r):this.removeClass(r):y(r)?this.each(function(t){E(this).toggleClass(r.call(this,t,ge(this),e),e)}):this.each(function(){var t,e,n,i;if(o)for(e=0,n=E(this),i=me(r);t=i[e++];)n.hasClass(t)?n.removeClass(t):n.addClass(t);else void 0!==r&&"boolean"!==s||((t=ge(this))&&Y.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===r?"":Y.get(this,"__className__")||""))})},hasClass:function(t){var e,n,i=0;for(e=" "+t+" ";n=this[i++];)if(1===n.nodeType&&-1<(" "+fe(ge(n))+" ").indexOf(e))return!0;return!1}});var ve=/\r/g;E.fn.extend({val:function(n){var i,t,r,e=this[0];return arguments.length?(r=y(n),this.each(function(t){var e;1===this.nodeType&&(null==(e=r?n.call(this,t,E(this).val()):n)?e="":"number"==typeof e?e+="":Array.isArray(e)&&(e=E.map(e,function(t){return null==t?"":t+""})),(i=E.valHooks[this.type]||E.valHooks[this.nodeName.toLowerCase()])&&"set"in i&&void 0!==i.set(this,e,"value")||(this.value=e))})):e?(i=E.valHooks[e.type]||E.valHooks[e.nodeName.toLowerCase()])&&"get"in i&&void 0!==(t=i.get(e,"value"))?t:"string"==typeof(t=e.value)?t.replace(ve,""):null==t?"":t:void 0}}),E.extend({valHooks:{option:{get:function(t){var e=E.find.attr(t,"value");return null!=e?e:fe(E.text(t))}},select:{get:function(t){var e,n,i,r=t.options,s=t.selectedIndex,o="select-one"===t.type,a=o?null:[],l=o?s+1:r.length;for(i=s<0?l:o?s:0;i<l;i++)if(((n=r[i]).selected||i===s)&&!n.disabled&&(!n.parentNode.disabled||!S(n.parentNode,"optgroup"))){if(e=E(n).val(),o)return e;a.push(e)}return a},set:function(t,e){for(var n,i,r=t.options,s=E.makeArray(e),o=r.length;o--;)((i=r[o]).selected=-1<E.inArray(E.valHooks.option.get(i),s))&&(n=!0);return n||(t.selectedIndex=-1),s}}}}),E.each(["radio","checkbox"],function(){E.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=-1<E.inArray(E(t).val(),e)}},v.checkOn||(E.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),v.focusin="onfocusin"in C;var ye=/^(?:focusinfocus|focusoutblur)$/,xe=function(t){t.stopPropagation()};E.extend(E.event,{trigger:function(t,e,n,i){var r,s,o,a,l,u,c,h,p=[n||T],d=m.call(t,"type")?t.type:t,f=m.call(t,"namespace")?t.namespace.split("."):[];if(s=h=o=n=n||T,3!==n.nodeType&&8!==n.nodeType&&!ye.test(d+E.event.triggered)&&(-1<d.indexOf(".")&&(d=(f=d.split(".")).shift(),f.sort()),l=d.indexOf(":")<0&&"on"+d,(t=t[E.expando]?t:new E.Event(d,"object"==typeof t&&t)).isTrigger=i?2:3,t.namespace=f.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=n),e=null==e?[t]:E.makeArray(e,[t]),c=E.event.special[d]||{},i||!c.trigger||!1!==c.trigger.apply(n,e))){if(!i&&!c.noBubble&&!x(n)){for(a=c.delegateType||d,ye.test(a+d)||(s=s.parentNode);s;s=s.parentNode)p.push(s),o=s;o===(n.ownerDocument||T)&&p.push(o.defaultView||o.parentWindow||C)}for(r=0;(s=p[r++])&&!t.isPropagationStopped();)h=s,t.type=1<r?a:c.bindType||d,(u=(Y.get(s,"events")||{})[t.type]&&Y.get(s,"handle"))&&u.apply(s,e),(u=l&&s[l])&&u.apply&&Q(s)&&(t.result=u.apply(s,e),!1===t.result&&t.preventDefault());return t.type=d,i||t.isDefaultPrevented()||c._default&&!1!==c._default.apply(p.pop(),e)||!Q(n)||l&&y(n[d])&&!x(n)&&((o=n[l])&&(n[l]=null),E.event.triggered=d,t.isPropagationStopped()&&h.addEventListener(d,xe),n[d](),t.isPropagationStopped()&&h.removeEventListener(d,xe),E.event.triggered=void 0,o&&(n[l]=o)),t.result}},simulate:function(t,e,n){var i=E.extend(new E.Event,n,{type:t,isSimulated:!0});E.event.trigger(i,null,e)}}),E.fn.extend({trigger:function(t,e){return this.each(function(){E.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return E.event.trigger(t,e,n,!0)}}),v.focusin||E.each({focus:"focusin",blur:"focusout"},function(n,i){var r=function(t){E.event.simulate(i,t.target,E.event.fix(t))};E.event.special[i]={setup:function(){var t=this.ownerDocument||this,e=Y.access(t,i);e||t.addEventListener(n,r,!0),Y.access(t,i,(e||0)+1)},teardown:function(){var t=this.ownerDocument||this,e=Y.access(t,i)-1;e?Y.access(t,i,e):(t.removeEventListener(n,r,!0),Y.remove(t,i))}}});var we=C.location,_e=Date.now(),be=/\?/;E.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new C.DOMParser).parseFromString(t,"text/xml")}catch(t){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||E.error("Invalid XML: "+t),e};var Ce=/\[\]$/,Te=/\r?\n/g,Ee=/^(?:submit|button|image|reset|file)$/i,De=/^(?:input|select|textarea|keygen)/i;function ke(n,t,i,r){var e;if(Array.isArray(t))E.each(t,function(t,e){i||Ce.test(n)?r(n,e):ke(n+"["+("object"==typeof e&&null!=e?t:"")+"]",e,i,r)});else if(i||"object"!==_(t))r(n,t);else for(e in t)ke(n+"["+e+"]",t[e],i,r)}E.param=function(t,e){var n,i=[],r=function(t,e){var n=y(e)?e():e;i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(t)||t.jquery&&!E.isPlainObject(t))E.each(t,function(){r(this.name,this.value)});else for(n in t)ke(n,t[n],e,r);return i.join("&")},E.fn.extend({serialize:function(){return E.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=E.prop(this,"elements");return t?E.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!E(this).is(":disabled")&&De.test(this.nodeName)&&!Ee.test(t)&&(this.checked||!ut.test(t))}).map(function(t,e){var n=E(this).val();return null==n?null:Array.isArray(n)?E.map(n,function(t){return{name:e.name,value:t.replace(Te,"\r\n")}}):{name:e.name,value:n.replace(Te,"\r\n")}}).get()}});var Se=/%20/g,$e=/#.*$/,je=/([?&])_=[^&]*/,Ae=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ne=/^(?:GET|HEAD)$/,Le=/^\/\//,qe={},ze={},He="*/".concat("*"),Pe=T.createElement("a");function Oe(s){return function(t,e){"string"!=typeof t&&(e=t,t="*");var n,i=0,r=t.toLowerCase().match(H)||[];if(y(e))for(;n=r[i++];)"+"===n[0]?(n=n.slice(1)||"*",(s[n]=s[n]||[]).unshift(e)):(s[n]=s[n]||[]).push(e)}}function Me(e,r,s,o){var a={},l=e===ze;function u(t){var i;return a[t]=!0,E.each(e[t]||[],function(t,e){var n=e(r,s,o);return"string"!=typeof n||l||a[n]?l?!(i=n):void 0:(r.dataTypes.unshift(n),u(n),!1)}),i}return u(r.dataTypes[0])||!a["*"]&&u("*")}function Re(t,e){var n,i,r=E.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((r[n]?t:i||(i={}))[n]=e[n]);return i&&E.extend(!0,t,i),t}Pe.href=we.href,E.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:we.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(we.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":He,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":E.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Re(Re(t,E.ajaxSettings),e):Re(E.ajaxSettings,t)},ajaxPrefilter:Oe(qe),ajaxTransport:Oe(ze),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var c,h,p,n,d,i,f,g,r,s,m=E.ajaxSetup({},e),v=m.context||m,y=m.context&&(v.nodeType||v.jquery)?E(v):E.event,x=E.Deferred(),w=E.Callbacks("once memory"),_=m.statusCode||{},o={},a={},l="canceled",b={readyState:0,getResponseHeader:function(t){var e;if(f){if(!n)for(n={};e=Ae.exec(p);)n[e[1].toLowerCase()]=e[2];e=n[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return f?p:null},setRequestHeader:function(t,e){return null==f&&(t=a[t.toLowerCase()]=a[t.toLowerCase()]||t,o[t]=e),this},overrideMimeType:function(t){return null==f&&(m.mimeType=t),this},statusCode:function(t){var e;if(t)if(f)b.always(t[b.status]);else for(e in t)_[e]=[_[e],t[e]];return this},abort:function(t){var e=t||l;return c&&c.abort(e),u(0,e),this}};if(x.promise(b),m.url=((t||m.url||we.href)+"").replace(Le,we.protocol+"//"),m.type=e.method||e.type||m.method||m.type,m.dataTypes=(m.dataType||"*").toLowerCase().match(H)||[""],null==m.crossDomain){i=T.createElement("a");try{i.href=m.url,i.href=i.href,m.crossDomain=Pe.protocol+"//"+Pe.host!=i.protocol+"//"+i.host}catch(t){m.crossDomain=!0}}if(m.data&&m.processData&&"string"!=typeof m.data&&(m.data=E.param(m.data,m.traditional)),Me(qe,m,e,b),f)return b;for(r in(g=E.event&&m.global)&&0==E.active++&&E.event.trigger("ajaxStart"),m.type=m.type.toUpperCase(),m.hasContent=!Ne.test(m.type),h=m.url.replace($e,""),m.hasContent?m.data&&m.processData&&0===(m.contentType||"").indexOf("application/x-www-form-urlencoded")&&(m.data=m.data.replace(Se,"+")):(s=m.url.slice(h.length),m.data&&(m.processData||"string"==typeof m.data)&&(h+=(be.test(h)?"&":"?")+m.data,delete m.data),!1===m.cache&&(h=h.replace(je,"$1"),s=(be.test(h)?"&":"?")+"_="+_e+++s),m.url=h+s),m.ifModified&&(E.lastModified[h]&&b.setRequestHeader("If-Modified-Since",E.lastModified[h]),E.etag[h]&&b.setRequestHeader("If-None-Match",E.etag[h])),(m.data&&m.hasContent&&!1!==m.contentType||e.contentType)&&b.setRequestHeader("Content-Type",m.contentType),b.setRequestHeader("Accept",m.dataTypes[0]&&m.accepts[m.dataTypes[0]]?m.accepts[m.dataTypes[0]]+("*"!==m.dataTypes[0]?", "+He+"; q=0.01":""):m.accepts["*"]),m.headers)b.setRequestHeader(r,m.headers[r]);if(m.beforeSend&&(!1===m.beforeSend.call(v,b,m)||f))return b.abort();if(l="abort",w.add(m.complete),b.done(m.success),b.fail(m.error),c=Me(ze,m,e,b)){if(b.readyState=1,g&&y.trigger("ajaxSend",[b,m]),f)return b;m.async&&0<m.timeout&&(d=C.setTimeout(function(){b.abort("timeout")},m.timeout));try{f=!1,c.send(o,u)}catch(t){if(f)throw t;u(-1,t)}}else u(-1,"No Transport");function u(t,e,n,i){var r,s,o,a,l,u=e;f||(f=!0,d&&C.clearTimeout(d),c=void 0,p=i||"",b.readyState=0<t?4:0,r=200<=t&&t<300||304===t,n&&(a=function(t,e,n){for(var i,r,s,o,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=t.mimeType||e.getResponseHeader("Content-Type"));if(i)for(r in a)if(a[r]&&a[r].test(i)){l.unshift(r);break}if(l[0]in n)s=l[0];else{for(r in n){if(!l[0]||t.converters[r+" "+l[0]]){s=r;break}o||(o=r)}s=s||o}if(s)return s!==l[0]&&l.unshift(s),n[s]}(m,b,n)),a=function(t,e,n,i){var r,s,o,a,l,u={},c=t.dataTypes.slice();if(c[1])for(o in t.converters)u[o.toLowerCase()]=t.converters[o];for(s=c.shift();s;)if(t.responseFields[s]&&(n[t.responseFields[s]]=e),!l&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=s,s=c.shift())if("*"===s)s=l;else if("*"!==l&&l!==s){if(!(o=u[l+" "+s]||u["* "+s]))for(r in u)if((a=r.split(" "))[1]===s&&(o=u[l+" "+a[0]]||u["* "+a[0]])){!0===o?o=u[r]:!0!==u[r]&&(s=a[0],c.unshift(a[1]));break}if(!0!==o)if(o&&t.throws)e=o(e);else try{e=o(e)}catch(t){return{state:"parsererror",error:o?t:"No conversion from "+l+" to "+s}}}return{state:"success",data:e}}(m,a,b,r),r?(m.ifModified&&((l=b.getResponseHeader("Last-Modified"))&&(E.lastModified[h]=l),(l=b.getResponseHeader("etag"))&&(E.etag[h]=l)),204===t||"HEAD"===m.type?u="nocontent":304===t?u="notmodified":(u=a.state,s=a.data,r=!(o=a.error))):(o=u,!t&&u||(u="error",t<0&&(t=0))),b.status=t,b.statusText=(e||u)+"",r?x.resolveWith(v,[s,u,b]):x.rejectWith(v,[b,u,o]),b.statusCode(_),_=void 0,g&&y.trigger(r?"ajaxSuccess":"ajaxError",[b,m,r?s:o]),w.fireWith(v,[b,u]),g&&(y.trigger("ajaxComplete",[b,m]),--E.active||E.event.trigger("ajaxStop")))}return b},getJSON:function(t,e,n){return E.get(t,e,n,"json")},getScript:function(t,e){return E.get(t,void 0,e,"script")}}),E.each(["get","post"],function(t,r){E[r]=function(t,e,n,i){return y(e)&&(i=i||n,n=e,e=void 0),E.ajax(E.extend({url:t,type:r,dataType:i,data:e,success:n},E.isPlainObject(t)&&t))}}),E._evalUrl=function(t){return E.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},E.fn.extend({wrapAll:function(t){var e;return this[0]&&(y(t)&&(t=t.call(this[0])),e=E(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(n){return y(n)?this.each(function(t){E(this).wrapInner(n.call(this,t))}):this.each(function(){var t=E(this),e=t.contents();e.length?e.wrapAll(n):t.append(n)})},wrap:function(e){var n=y(e);return this.each(function(t){E(this).wrapAll(n?e.call(this,t):e)})},unwrap:function(t){return this.parent(t).not("body").each(function(){E(this).replaceWith(this.childNodes)}),this}}),E.expr.pseudos.hidden=function(t){return!E.expr.pseudos.visible(t)},E.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},E.ajaxSettings.xhr=function(){try{return new C.XMLHttpRequest}catch(t){}};var Ie={0:200,1223:204},We=E.ajaxSettings.xhr();v.cors=!!We&&"withCredentials"in We,v.ajax=We=!!We,E.ajaxTransport(function(r){var s,o;if(v.cors||We&&!r.crossDomain)return{send:function(t,e){var n,i=r.xhr();if(i.open(r.type,r.url,r.async,r.username,r.password),r.xhrFields)for(n in r.xhrFields)i[n]=r.xhrFields[n];for(n in r.mimeType&&i.overrideMimeType&&i.overrideMimeType(r.mimeType),r.crossDomain||t["X-Requested-With"]||(t["X-Requested-With"]="XMLHttpRequest"),t)i.setRequestHeader(n,t[n]);s=function(t){return function(){s&&(s=o=i.onload=i.onerror=i.onabort=i.ontimeout=i.onreadystatechange=null,"abort"===t?i.abort():"error"===t?"number"!=typeof i.status?e(0,"error"):e(i.status,i.statusText):e(Ie[i.status]||i.status,i.statusText,"text"!==(i.responseType||"text")||"string"!=typeof i.responseText?{binary:i.response}:{text:i.responseText},i.getAllResponseHeaders()))}},i.onload=s(),o=i.onerror=i.ontimeout=s("error"),void 0!==i.onabort?i.onabort=o:i.onreadystatechange=function(){4===i.readyState&&C.setTimeout(function(){s&&o()})},s=s("abort");try{i.send(r.hasContent&&r.data||null)}catch(t){if(s)throw t}},abort:function(){s&&s()}}}),E.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),E.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return E.globalEval(t),t}}}),E.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),E.ajaxTransport("script",function(n){var i,r;if(n.crossDomain)return{send:function(t,e){i=E("<script>").prop({charset:n.scriptCharset,src:n.url}).on("load error",r=function(t){i.remove(),r=null,t&&e("error"===t.type?404:200,t.type)}),T.head.appendChild(i[0])},abort:function(){r&&r()}}});var Be,Fe=[],Ue=/(=)\?(?=&|$)|\?\?/;E.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Fe.pop()||E.expando+"_"+_e++;return this[t]=!0,t}}),E.ajaxPrefilter("json jsonp",function(t,e,n){var i,r,s,o=!1!==t.jsonp&&(Ue.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ue.test(t.data)&&"data");if(o||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=y(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,o?t[o]=t[o].replace(Ue,"$1"+i):!1!==t.jsonp&&(t.url+=(be.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return s||E.error(i+" was not called"),s[0]},t.dataTypes[0]="json",r=C[i],C[i]=function(){s=arguments},n.always(function(){void 0===r?E(C).removeProp(i):C[i]=r,t[i]&&(t.jsonpCallback=e.jsonpCallback,Fe.push(i)),s&&y(r)&&r(s[0]),s=r=void 0}),"script"}),v.createHTMLDocument=((Be=T.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Be.childNodes.length),E.parseHTML=function(t,e,n){return"string"!=typeof t?[]:("boolean"==typeof e&&(n=e,e=!1),e||(v.createHTMLDocument?((i=(e=T.implementation.createHTMLDocument("")).createElement("base")).href=T.location.href,e.head.appendChild(i)):e=T),s=!n&&[],(r=$.exec(t))?[e.createElement(r[1])]:(r=yt([t],e,s),s&&s.length&&E(s).remove(),E.merge([],r.childNodes)));var i,r,s},E.fn.load=function(t,e,n){var i,r,s,o=this,a=t.indexOf(" ");return-1<a&&(i=fe(t.slice(a)),t=t.slice(0,a)),y(e)?(n=e,e=void 0):e&&"object"==typeof e&&(r="POST"),0<o.length&&E.ajax({url:t,type:r||"GET",dataType:"html",data:e}).done(function(t){s=arguments,o.html(i?E("<div>").append(E.parseHTML(t)).find(i):t)}).always(n&&function(t,e){o.each(function(){n.apply(this,s||[t.responseText,e,t])})}),this},E.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){E.fn[e]=function(t){return this.on(e,t)}}),E.expr.pseudos.animated=function(e){return E.grep(E.timers,function(t){return e===t.elem}).length},E.offset={setOffset:function(t,e,n){var i,r,s,o,a,l,u=E.css(t,"position"),c=E(t),h={};"static"===u&&(t.style.position="relative"),a=c.offset(),s=E.css(t,"top"),l=E.css(t,"left"),r=("absolute"===u||"fixed"===u)&&-1<(s+l).indexOf("auto")?(o=(i=c.position()).top,i.left):(o=parseFloat(s)||0,parseFloat(l)||0),y(e)&&(e=e.call(t,n,E.extend({},a))),null!=e.top&&(h.top=e.top-a.top+o),null!=e.left&&(h.left=e.left-a.left+r),"using"in e?e.using.call(t,h):c.css(h)}},E.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){E.offset.setOffset(this,e,t)});var t,n,i=this[0];return i?i.getClientRects().length?(t=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n,i=this[0],r={top:0,left:0};if("fixed"===E.css(i,"position"))e=i.getBoundingClientRect();else{for(e=this.offset(),n=i.ownerDocument,t=i.offsetParent||n.documentElement;t&&(t===n.body||t===n.documentElement)&&"static"===E.css(t,"position");)t=t.parentNode;t&&t!==i&&1===t.nodeType&&((r=E(t).offset()).top+=E.css(t,"borderTopWidth",!0),r.left+=E.css(t,"borderLeftWidth",!0))}return{top:e.top-r.top-E.css(i,"marginTop",!0),left:e.left-r.left-E.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===E.css(t,"position");)t=t.offsetParent;return t||xt})}}),E.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,r){var s="pageYOffset"===r;E.fn[e]=function(t){return B(this,function(t,e,n){var i;if(x(t)?i=t:9===t.nodeType&&(i=t.defaultView),void 0===n)return i?i[r]:t[e];i?i.scrollTo(s?i.pageXOffset:n,s?n:i.pageYOffset):t[e]=n},e,t,arguments.length)}}),E.each(["top","left"],function(t,n){E.cssHooks[n]=It(v.pixelPosition,function(t,e){if(e)return e=Rt(t,n),Pt.test(e)?E(t).position()[n]+"px":e})}),E.each({Height:"height",Width:"width"},function(o,a){E.each({padding:"inner"+o,content:a,"":"outer"+o},function(i,s){E.fn[s]=function(t,e){var n=arguments.length&&(i||"boolean"!=typeof t),r=i||(!0===t||!0===e?"margin":"border");return B(this,function(t,e,n){var i;return x(t)?0===s.indexOf("outer")?t["inner"+o]:t.document.documentElement["client"+o]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+o],i["scroll"+o],t.body["offset"+o],i["offset"+o],i["client"+o])):void 0===n?E.css(t,e,r):E.style(t,e,n,r)},a,n?t:void 0,n)}})}),E.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,n){E.fn[n]=function(t,e){return 0<arguments.length?this.on(n,null,t,e):this.trigger(n)}}),E.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),E.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}}),E.proxy=function(t,e){var n,i,r;if("string"==typeof e&&(n=t[e],e=t,t=n),y(t))return i=a.call(arguments,2),(r=function(){return t.apply(e||this,i.concat(a.call(arguments)))}).guid=t.guid=t.guid||E.guid++,r},E.holdReady=function(t){t?E.readyWait++:E.ready(!0)},E.isArray=Array.isArray,E.parseJSON=JSON.parse,E.nodeName=S,E.isFunction=y,E.isWindow=x,E.camelCase=V,E.type=_,E.now=Date.now,E.isNumeric=function(t){var e=E.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},"function"==typeof define&&define.amd&&define("jquery",[],function(){return E});var Xe=C.jQuery,Ve=C.$;return E.noConflict=function(t){return C.$===E&&(C.$=Ve),t&&C.jQuery===E&&(C.jQuery=Xe),E},t||(C.jQuery=C.$=E),E}),function(l,n,r,a){function u(t,e){this.settings=null,this.options=l.extend({},u.Defaults,e),this.$element=l(t),this._handlers={},this._plugins={},this._supress={},this._current=null,this._speed=null,this._coordinates=[],this._breakpoint=null,this._width=null,this._items=[],this._clones=[],this._mergers=[],this._widths=[],this._invalidated={},this._pipe=[],this._drag={time:null,target:null,pointer:null,stage:{start:null,current:null},direction:null},this._states={current:{},tags:{initializing:["busy"],animating:["busy"],dragging:["interacting"]}},l.each(["onResize","onThrottledResize"],l.proxy(function(t,e){this._handlers[e]=l.proxy(this[e],this)},this)),l.each(u.Plugins,l.proxy(function(t,e){this._plugins[t.charAt(0).toLowerCase()+t.slice(1)]=new e(this)},this)),l.each(u.Workers,l.proxy(function(t,e){this._pipe.push({filter:e.filter,run:l.proxy(e.run,this)})},this)),this.setup(),this.initialize()}u.Defaults={items:3,loop:!1,center:!1,rewind:!1,checkVisibility:!0,mouseDrag:!0,touchDrag:!0,pullDrag:!0,freeDrag:!1,margin:0,stagePadding:0,merge:!1,mergeFit:!0,autoWidth:!1,startPosition:0,rtl:!1,smartSpeed:250,fluidSpeed:!1,dragEndSpeed:!1,responsive:{},responsiveRefreshRate:200,responsiveBaseElement:n,fallbackEasing:"swing",slideTransition:"",info:!1,nestedItemSelector:!1,itemElement:"div",stageElement:"div",refreshClass:"owl-refresh",loadedClass:"owl-loaded",loadingClass:"owl-loading",rtlClass:"owl-rtl",responsiveClass:"owl-responsive",dragClass:"owl-drag",itemClass:"owl-item",stageClass:"owl-stage",stageOuterClass:"owl-stage-outer",grabClass:"owl-grab"},u.Width={Default:"default",Inner:"inner",Outer:"outer"},u.Type={Event:"event",State:"state"},u.Plugins={},u.Workers=[{filter:["width","settings"],run:function(){this._width=this.$element.width()}},{filter:["width","items","settings"],run:function(t){t.current=this._items&&this._items[this.relative(this._current)]}},{filter:["items","settings"],run:function(){this.$stage.children(".cloned").remove()}},{filter:["width","items","settings"],run:function(t){var e=this.settings.margin||"",n=!this.settings.autoWidth,i=this.settings.rtl,r={width:"auto","margin-left":i?e:"","margin-right":i?"":e};!n&&this.$stage.children().css(r),t.css=r}},{filter:["width","items","settings"],run:function(t){var e=(this.width()/this.settings.items).toFixed(3)-this.settings.margin,n=null,i=this._items.length,r=!this.settings.autoWidth,s=[];for(t.items={merge:!1,width:e};i--;)n=this._mergers[i],n=this.settings.mergeFit&&Math.min(n,this.settings.items)||n,t.items.merge=1<n||t.items.merge,s[i]=r?e*n:this._items[i].width();this._widths=s}},{filter:["items","settings"],run:function(){var t=[],e=this._items,n=this.settings,i=Math.max(2*n.items,4),r=2*Math.ceil(e.length/2),s=n.loop&&e.length?n.rewind?i:Math.max(i,r):0,o="",a="";for(s/=2;0<s;)t.push(this.normalize(t.length/2,!0)),o+=e[t[t.length-1]][0].outerHTML,t.push(this.normalize(e.length-1-(t.length-1)/2,!0)),a=e[t[t.length-1]][0].outerHTML+a,s-=1;this._clones=t,l(o).addClass("cloned").appendTo(this.$stage),l(a).addClass("cloned").prependTo(this.$stage)}},{filter:["width","items","settings"],run:function(){for(var t=this.settings.rtl?1:-1,e=this._clones.length+this._items.length,n=-1,i=0,r=0,s=[];++n<e;)i=s[n-1]||0,r=this._widths[this.relative(n)]+this.settings.margin,s.push(i+r*t);this._coordinates=s}},{filter:["width","items","settings"],run:function(){var t=this.settings.stagePadding,e=this._coordinates,n={width:Math.ceil(Math.abs(e[e.length-1]))+2*t,"padding-left":t||"","padding-right":t||""};this.$stage.css(n)}},{filter:["width","items","settings"],run:function(t){var e=this._coordinates.length,n=!this.settings.autoWidth,i=this.$stage.children();if(n&&t.items.merge)for(;e--;)t.css.width=this._widths[this.relative(e)],i.eq(e).css(t.css);else n&&(t.css.width=t.items.width,i.css(t.css))}},{filter:["items"],run:function(){this._coordinates.length<1&&this.$stage.removeAttr("style")}},{filter:["width","items","settings"],run:function(t){t.current=t.current?this.$stage.children().index(t.current):0,t.current=Math.max(this.minimum(),Math.min(this.maximum(),t.current)),this.reset(t.current)}},{filter:["position"],run:function(){this.animate(this.coordinates(this._current))}},{filter:["width","position","items","settings"],run:function(){var t,e,n,i,r=this.settings.rtl?1:-1,s=2*this.settings.stagePadding,o=this.coordinates(this.current())+s,a=o+this.width()*r,l=[];for(n=0,i=this._coordinates.length;n<i;n++)t=this._coordinates[n-1]||0,e=Math.abs(this._coordinates[n])+s*r,(this.op(t,"<=",o)&&this.op(t,">",a)||this.op(e,"<",o)&&this.op(e,">",a))&&l.push(n);this.$stage.children(".active").removeClass("active"),this.$stage.children(":eq("+l.join("), :eq(")+")").addClass("active"),this.$stage.children(".center").removeClass("center"),this.settings.center&&this.$stage.children().eq(this.current()).addClass("center")}}],u.prototype.initializeStage=function(){this.$stage=this.$element.find("."+this.settings.stageClass),this.$stage.length||(this.$element.addClass(this.options.loadingClass),this.$stage=l("<"+this.settings.stageElement+">",{class:this.settings.stageClass}).wrap(l("<div/>",{class:this.settings.stageOuterClass})),this.$element.append(this.$stage.parent()))},u.prototype.initializeItems=function(){var t=this.$element.find(".owl-item");if(t.length)return this._items=t.get().map(function(t){return l(t)}),this._mergers=this._items.map(function(){return 1}),void this.refresh();this.replace(this.$element.children().not(this.$stage.parent())),this.isVisible()?this.refresh():this.invalidate("width"),this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass)},u.prototype.initialize=function(){var t,e,n;(this.enter("initializing"),this.trigger("initialize"),this.$element.toggleClass(this.settings.rtlClass,this.settings.rtl),this.settings.autoWidth&&!this.is("pre-loading"))&&(t=this.$element.find("img"),e=this.settings.nestedItemSelector?"."+this.settings.nestedItemSelector:a,n=this.$element.children(e).width(),t.length&&n<=0&&this.preloadAutoWidthImages(t));this.initializeStage(),this.initializeItems(),this.registerEventHandlers(),this.leave("initializing"),this.trigger("initialized")},u.prototype.isVisible=function(){return!this.settings.checkVisibility||this.$element.is(":visible")},u.prototype.setup=function(){var e=this.viewport(),t=this.options.responsive,n=-1,i=null;t?(l.each(t,function(t){t<=e&&n<t&&(n=Number(t))}),"function"==typeof(i=l.extend({},this.options,t[n])).stagePadding&&(i.stagePadding=i.stagePadding()),delete i.responsive,i.responsiveClass&&this.$element.attr("class",this.$element.attr("class").replace(new RegExp("("+this.options.responsiveClass+"-)\\S+\\s","g"),"$1"+n))):i=l.extend({},this.options),this.trigger("change",{property:{name:"settings",value:i}}),this._breakpoint=n,this.settings=i,this.invalidate("settings"),this.trigger("changed",{property:{name:"settings",value:this.settings}})},u.prototype.optionsLogic=function(){this.settings.autoWidth&&(this.settings.stagePadding=!1,this.settings.merge=!1)},u.prototype.prepare=function(t){var e=this.trigger("prepare",{content:t});return e.data||(e.data=l("<"+this.settings.itemElement+"/>").addClass(this.options.itemClass).append(t)),this.trigger("prepared",{content:e.data}),e.data},u.prototype.update=function(){for(var t=0,e=this._pipe.length,n=l.proxy(function(t){return this[t]},this._invalidated),i={};t<e;)(this._invalidated.all||0<l.grep(this._pipe[t].filter,n).length)&&this._pipe[t].run(i),t++;this._invalidated={},!this.is("valid")&&this.enter("valid")},u.prototype.width=function(t){switch(t=t||u.Width.Default){case u.Width.Inner:case u.Width.Outer:return this._width;default:return this._width-2*this.settings.stagePadding+this.settings.margin}},u.prototype.refresh=function(){this.enter("refreshing"),this.trigger("refresh"),this.setup(),this.optionsLogic(),this.$element.addClass(this.options.refreshClass),this.update(),this.$element.removeClass(this.options.refreshClass),this.leave("refreshing"),this.trigger("refreshed")},u.prototype.onThrottledResize=function(){n.clearTimeout(this.resizeTimer),this.resizeTimer=n.setTimeout(this._handlers.onResize,this.settings.responsiveRefreshRate)},u.prototype.onResize=function(){return!!this._items.length&&(this._width!==this.$element.width()&&(!!this.isVisible()&&(this.enter("resizing"),this.trigger("resize").isDefaultPrevented()?(this.leave("resizing"),!1):(this.invalidate("width"),this.refresh(),this.leave("resizing"),void this.trigger("resized")))))},u.prototype.registerEventHandlers=function(){l.support.transition&&this.$stage.on(l.support.transition.end+".owl.core",l.proxy(this.onTransitionEnd,this)),!1!==this.settings.responsive&&this.on(n,"resize",this._handlers.onThrottledResize),this.settings.mouseDrag&&(this.$element.addClass(this.options.dragClass),this.$stage.on("mousedown.owl.core",l.proxy(this.onDragStart,this)),this.$stage.on("dragstart.owl.core selectstart.owl.core",function(){return!1})),this.settings.touchDrag&&(this.$stage.on("touchstart.owl.core",l.proxy(this.onDragStart,this)),this.$stage.on("touchcancel.owl.core",l.proxy(this.onDragEnd,this)))},u.prototype.onDragStart=function(t){var e=null;3!==t.which&&(e=l.support.transform?{x:(e=this.$stage.css("transform").replace(/.*\(|\)| /g,"").split(","))[16===e.length?12:4],y:e[16===e.length?13:5]}:(e=this.$stage.position(),{x:this.settings.rtl?e.left+this.$stage.width()-this.width()+this.settings.margin:e.left,y:e.top}),this.is("animating")&&(l.support.transform?this.animate(e.x):this.$stage.stop(),this.invalidate("position")),this.$element.toggleClass(this.options.grabClass,"mousedown"===t.type),this.speed(0),this._drag.time=(new Date).getTime(),this._drag.target=l(t.target),this._drag.stage.start=e,this._drag.stage.current=e,this._drag.pointer=this.pointer(t),l(r).on("mouseup.owl.core touchend.owl.core",l.proxy(this.onDragEnd,this)),l(r).one("mousemove.owl.core touchmove.owl.core",l.proxy(function(t){var e=this.difference(this._drag.pointer,this.pointer(t));l(r).on("mousemove.owl.core touchmove.owl.core",l.proxy(this.onDragMove,this)),Math.abs(e.x)<Math.abs(e.y)&&this.is("valid")||(t.preventDefault(),this.enter("dragging"),this.trigger("drag"))},this)))},u.prototype.onDragMove=function(t){var e=null,n=null,i=null,r=this.difference(this._drag.pointer,this.pointer(t)),s=this.difference(this._drag.stage.start,r);this.is("dragging")&&(t.preventDefault(),this.settings.loop?(e=this.coordinates(this.minimum()),n=this.coordinates(this.maximum()+1)-e,s.x=((s.x-e)%n+n)%n+e):(e=this.settings.rtl?this.coordinates(this.maximum()):this.coordinates(this.minimum()),n=this.settings.rtl?this.coordinates(this.minimum()):this.coordinates(this.maximum()),i=this.settings.pullDrag?-1*r.x/5:0,s.x=Math.max(Math.min(s.x,e+i),n+i)),this._drag.stage.current=s,this.animate(s.x))},u.prototype.onDragEnd=function(t){var e=this.difference(this._drag.pointer,this.pointer(t)),n=this._drag.stage.current,i=0<e.x^this.settings.rtl?"left":"right";l(r).off(".owl.core"),this.$element.removeClass(this.options.grabClass),(0!==e.x&&this.is("dragging")||!this.is("valid"))&&(this.speed(this.settings.dragEndSpeed||this.settings.smartSpeed),this.current(this.closest(n.x,0!==e.x?i:this._drag.direction)),this.invalidate("position"),this.update(),this._drag.direction=i,(3<Math.abs(e.x)||300<(new Date).getTime()-this._drag.time)&&this._drag.target.one("click.owl.core",function(){return!1})),this.is("dragging")&&(this.leave("dragging"),this.trigger("dragged"))},u.prototype.closest=function(n,i){var r=-1,s=this.width(),o=this.coordinates();return this.settings.freeDrag||l.each(o,l.proxy(function(t,e){return"left"===i&&e-30<n&&n<e+30?r=t:"right"===i&&e-s-30<n&&n<e-s+30?r=t+1:this.op(n,"<",e)&&this.op(n,">",o[t+1]!==a?o[t+1]:e-s)&&(r="left"===i?t+1:t),-1===r},this)),this.settings.loop||(this.op(n,">",o[this.minimum()])?r=n=this.minimum():this.op(n,"<",o[this.maximum()])&&(r=n=this.maximum())),r},u.prototype.animate=function(t){var e=0<this.speed();this.is("animating")&&this.onTransitionEnd(),e&&(this.enter("animating"),this.trigger("translate")),l.support.transform3d&&l.support.transition?this.$stage.css({transform:"translate3d("+t+"px,0px,0px)",transition:this.speed()/1e3+"s"+(this.settings.slideTransition?" "+this.settings.slideTransition:"")}):e?this.$stage.animate({left:t+"px"},this.speed(),this.settings.fallbackEasing,l.proxy(this.onTransitionEnd,this)):this.$stage.css({left:t+"px"})},u.prototype.is=function(t){return this._states.current[t]&&0<this._states.current[t]},u.prototype.current=function(t){if(t===a)return this._current;if(0===this._items.length)return a;if(t=this.normalize(t),this._current!==t){var e=this.trigger("change",{property:{name:"position",value:t}});e.data!==a&&(t=this.normalize(e.data)),this._current=t,this.invalidate("position"),this.trigger("changed",{property:{name:"position",value:this._current}})}return this._current},u.prototype.invalidate=function(t){return"string"===l.type(t)&&(this._invalidated[t]=!0,this.is("valid")&&this.leave("valid")),l.map(this._invalidated,function(t,e){return e})},u.prototype.reset=function(t){(t=this.normalize(t))!==a&&(this._speed=0,this._current=t,this.suppress(["translate","translated"]),this.animate(this.coordinates(t)),this.release(["translate","translated"]))},u.prototype.normalize=function(t,e){var n=this._items.length,i=e?0:this._clones.length;return!this.isNumeric(t)||n<1?t=a:(t<0||n+i<=t)&&(t=((t-i/2)%n+n)%n+i/2),t},u.prototype.relative=function(t){return t-=this._clones.length/2,this.normalize(t,!0)},u.prototype.maximum=function(t){var e,n,i,r=this.settings,s=this._coordinates.length;if(r.loop)s=this._clones.length/2+this._items.length-1;else if(r.autoWidth||r.merge){if(e=this._items.length)for(n=this._items[--e].width(),i=this.$element.width();e--&&!(i<(n+=this._items[e].width()+this.settings.margin)););s=e+1}else s=r.center?this._items.length-1:this._items.length-r.items;return t&&(s-=this._clones.length/2),Math.max(s,0)},u.prototype.minimum=function(t){return t?0:this._clones.length/2},u.prototype.items=function(t){return t===a?this._items.slice():(t=this.normalize(t,!0),this._items[t])},u.prototype.mergers=function(t){return t===a?this._mergers.slice():(t=this.normalize(t,!0),this._mergers[t])},u.prototype.clones=function(n){var e=this._clones.length/2,i=e+this._items.length,r=function(t){return t%2==0?i+t/2:e-(t+1)/2};return n===a?l.map(this._clones,function(t,e){return r(e)}):l.map(this._clones,function(t,e){return t===n?r(e):null})},u.prototype.speed=function(t){return t!==a&&(this._speed=t),this._speed},u.prototype.coordinates=function(t){var e,n=1,i=t-1;return t===a?l.map(this._coordinates,l.proxy(function(t,e){return this.coordinates(e)},this)):(this.settings.center?(this.settings.rtl&&(n=-1,i=t+1),e=this._coordinates[t],e+=(this.width()-e+(this._coordinates[i]||0))/2*n):e=this._coordinates[i]||0,e=Math.ceil(e))},u.prototype.duration=function(t,e,n){return 0===n?0:Math.min(Math.max(Math.abs(e-t),1),6)*Math.abs(n||this.settings.smartSpeed)},u.prototype.to=function(t,e){var n=this.current(),i=null,r=t-this.relative(n),s=(0<r)-(r<0),o=this._items.length,a=this.minimum(),l=this.maximum();this.settings.loop?(!this.settings.rewind&&Math.abs(r)>o/2&&(r+=-1*s*o),(i=(((t=n+r)-a)%o+o)%o+a)!==t&&i-r<=l&&0<i-r&&(n=i-r,t=i,this.reset(n))):t=this.settings.rewind?(t%(l+=1)+l)%l:Math.max(a,Math.min(l,t)),this.speed(this.duration(n,t,e)),this.current(t),this.isVisible()&&this.update()},u.prototype.next=function(t){t=t||!1,this.to(this.relative(this.current())+1,t)},u.prototype.prev=function(t){t=t||!1,this.to(this.relative(this.current())-1,t)},u.prototype.onTransitionEnd=function(t){if(t!==a&&(t.stopPropagation(),(t.target||t.srcElement||t.originalTarget)!==this.$stage.get(0)))return!1;this.leave("animating"),this.trigger("translated")},u.prototype.viewport=function(){var t;return this.options.responsiveBaseElement!==n?t=l(this.options.responsiveBaseElement).width():n.innerWidth?t=n.innerWidth:r.documentElement&&r.documentElement.clientWidth?t=r.documentElement.clientWidth:console.warn("Can not detect viewport width."),t},u.prototype.replace=function(t){this.$stage.empty(),this._items=[],t&&(t=t instanceof jQuery?t:l(t)),this.settings.nestedItemSelector&&(t=t.find("."+this.settings.nestedItemSelector)),t.filter(function(){return 1===this.nodeType}).each(l.proxy(function(t,e){e=this.prepare(e),this.$stage.append(e),this._items.push(e),this._mergers.push(1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)},this)),this.reset(this.isNumeric(this.settings.startPosition)?this.settings.startPosition:0),this.invalidate("items")},u.prototype.add=function(t,e){var n=this.relative(this._current);e=e===a?this._items.length:this.normalize(e,!0),t=t instanceof jQuery?t:l(t),this.trigger("add",{content:t,position:e}),t=this.prepare(t),0===this._items.length||e===this._items.length?(0===this._items.length&&this.$stage.append(t),0!==this._items.length&&this._items[e-1].after(t),this._items.push(t),this._mergers.push(1*t.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)):(this._items[e].before(t),this._items.splice(e,0,t),this._mergers.splice(e,0,1*t.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)),this._items[n]&&this.reset(this._items[n].index()),this.invalidate("items"),this.trigger("added",{content:t,position:e})},u.prototype.remove=function(t){(t=this.normalize(t,!0))!==a&&(this.trigger("remove",{content:this._items[t],position:t}),this._items[t].remove(),this._items.splice(t,1),this._mergers.splice(t,1),this.invalidate("items"),this.trigger("removed",{content:null,position:t}))},u.prototype.preloadAutoWidthImages=function(t){t.each(l.proxy(function(t,e){this.enter("pre-loading"),e=l(e),l(new Image).one("load",l.proxy(function(t){e.attr("src",t.target.src),e.css("opacity",1),this.leave("pre-loading"),!this.is("pre-loading")&&!this.is("initializing")&&this.refresh()},this)).attr("src",e.attr("src")||e.attr("data-src")||e.attr("data-src-retina"))},this))},u.prototype.destroy=function(){for(var t in this.$element.off(".owl.core"),this.$stage.off(".owl.core"),l(r).off(".owl.core"),!1!==this.settings.responsive&&(n.clearTimeout(this.resizeTimer),this.off(n,"resize",this._handlers.onThrottledResize)),this._plugins)this._plugins[t].destroy();this.$stage.children(".cloned").remove(),this.$stage.unwrap(),this.$stage.children().contents().unwrap(),this.$stage.children().unwrap(),this.$stage.remove(),this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr("class",this.$element.attr("class").replace(new RegExp(this.options.responsiveClass+"-\\S+\\s","g"),"")).removeData("owl.carousel")},u.prototype.op=function(t,e,n){var i=this.settings.rtl;switch(e){case"<":return i?n<t:t<n;case">":return i?t<n:n<t;case">=":return i?t<=n:n<=t;case"<=":return i?n<=t:t<=n}},u.prototype.on=function(t,e,n,i){t.addEventListener?t.addEventListener(e,n,i):t.attachEvent&&t.attachEvent("on"+e,n)},u.prototype.off=function(t,e,n,i){t.removeEventListener?t.removeEventListener(e,n,i):t.detachEvent&&t.detachEvent("on"+e,n)},u.prototype.trigger=function(t,e,n,i,r){var s={item:{count:this._items.length,index:this.current()}},o=l.camelCase(l.grep(["on",t,n],function(t){return t}).join("-").toLowerCase()),a=l.Event([t,"owl",n||"carousel"].join(".").toLowerCase(),l.extend({relatedTarget:this},s,e));return this._supress[t]||(l.each(this._plugins,function(t,e){e.onTrigger&&e.onTrigger(a)}),this.register({type:u.Type.Event,name:t}),this.$element.trigger(a),this.settings&&"function"==typeof this.settings[o]&&this.settings[o].call(this,a)),a},u.prototype.enter=function(t){l.each([t].concat(this._states.tags[t]||[]),l.proxy(function(t,e){this._states.current[e]===a&&(this._states.current[e]=0),this._states.current[e]++},this))},u.prototype.leave=function(t){l.each([t].concat(this._states.tags[t]||[]),l.proxy(function(t,e){this._states.current[e]--},this))},u.prototype.register=function(n){if(n.type===u.Type.Event){if(l.event.special[n.name]||(l.event.special[n.name]={}),!l.event.special[n.name].owl){var e=l.event.special[n.name]._default;l.event.special[n.name]._default=function(t){return!e||!e.apply||t.namespace&&-1!==t.namespace.indexOf("owl")?t.namespace&&-1<t.namespace.indexOf("owl"):e.apply(this,arguments)},l.event.special[n.name].owl=!0}}else n.type===u.Type.State&&(this._states.tags[n.name]?this._states.tags[n.name]=this._states.tags[n.name].concat(n.tags):this._states.tags[n.name]=n.tags,this._states.tags[n.name]=l.grep(this._states.tags[n.name],l.proxy(function(t,e){return l.inArray(t,this._states.tags[n.name])===e},this)))},u.prototype.suppress=function(t){l.each(t,l.proxy(function(t,e){this._supress[e]=!0},this))},u.prototype.release=function(t){l.each(t,l.proxy(function(t,e){delete this._supress[e]},this))},u.prototype.pointer=function(t){var e={x:null,y:null};return(t=(t=t.originalEvent||t||n.event).touches&&t.touches.length?t.touches[0]:t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t).pageX?(e.x=t.pageX,e.y=t.pageY):(e.x=t.clientX,e.y=t.clientY),e},u.prototype.isNumeric=function(t){return!isNaN(parseFloat(t))},u.prototype.difference=function(t,e){return{x:t.x-e.x,y:t.y-e.y}},l.fn.owlCarousel=function(e){var i=Array.prototype.slice.call(arguments,1);return this.each(function(){var t=l(this),n=t.data("owl.carousel");n||(n=new u(this,"object"==typeof e&&e),t.data("owl.carousel",n),l.each(["next","prev","to","destroy","refresh","replace","add","remove"],function(t,e){n.register({type:u.Type.Event,name:e}),n.$element.on(e+".owl.carousel.core",l.proxy(function(t){t.namespace&&t.relatedTarget!==this&&(this.suppress([e]),n[e].apply(this,[].slice.call(arguments,1)),this.release([e]))},n))})),"string"==typeof e&&"_"!==e.charAt(0)&&n[e].apply(n,i)})},l.fn.owlCarousel.Constructor=u}(window.Zepto||window.jQuery,window,document),function(e,n,t,i){var r=function(t){this._core=t,this._interval=null,this._visible=null,this._handlers={"initialized.owl.carousel":e.proxy(function(t){t.namespace&&this._core.settings.autoRefresh&&this.watch()},this)},this._core.options=e.extend({},r.Defaults,this._core.options),this._core.$element.on(this._handlers)};r.Defaults={autoRefresh:!0,autoRefreshInterval:500},r.prototype.watch=function(){this._interval||(this._visible=this._core.isVisible(),this._interval=n.setInterval(e.proxy(this.refresh,this),this._core.settings.autoRefreshInterval))},r.prototype.refresh=function(){this._core.isVisible()!==this._visible&&(this._visible=!this._visible,this._core.$element.toggleClass("owl-hidden",!this._visible),this._visible&&this._core.invalidate("width")&&this._core.refresh())},r.prototype.destroy=function(){var t,e;for(t in n.clearInterval(this._interval),this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},e.fn.owlCarousel.Constructor.Plugins.AutoRefresh=r}(window.Zepto||window.jQuery,window,document),function(a,s,t,e){var n=function(t){this._core=t,this._loaded=[],this._handlers={"initialized.owl.carousel change.owl.carousel resized.owl.carousel":a.proxy(function(t){if(t.namespace&&this._core.settings&&this._core.settings.lazyLoad&&(t.property&&"position"==t.property.name||"initialized"==t.type)){var e=this._core.settings,n=e.center&&Math.ceil(e.items/2)||e.items,i=e.center&&-1*n||0,r=(t.property&&void 0!==t.property.value?t.property.value:this._core.current())+i,s=this._core.clones().length,o=a.proxy(function(t,e){this.load(e)},this);for(0<e.lazyLoadEager&&(n+=e.lazyLoadEager,e.loop&&(r-=e.lazyLoadEager,n++));i++<n;)this.load(s/2+this._core.relative(r)),s&&a.each(this._core.clones(this._core.relative(r)),o),r++}},this)},this._core.options=a.extend({},n.Defaults,this._core.options),this._core.$element.on(this._handlers)};n.Defaults={lazyLoad:!1,lazyLoadEager:0},n.prototype.load=function(t){var e=this._core.$stage.children().eq(t),n=e&&e.find(".owl-lazy");!n||-1<a.inArray(e.get(0),this._loaded)||(n.each(a.proxy(function(t,e){var n,i=a(e),r=1<s.devicePixelRatio&&i.attr("data-src-retina")||i.attr("data-src")||i.attr("data-srcset");this._core.trigger("load",{element:i,url:r},"lazy"),i.is("img")?i.one("load.owl.lazy",a.proxy(function(){i.css("opacity",1),this._core.trigger("loaded",{element:i,url:r},"lazy")},this)).attr("src",r):i.is("source")?i.one("load.owl.lazy",a.proxy(function(){this._core.trigger("loaded",{element:i,url:r},"lazy")},this)).attr("srcset",r):((n=new Image).onload=a.proxy(function(){i.css({"background-image":'url("'+r+'")',opacity:"1"}),this._core.trigger("loaded",{element:i,url:r},"lazy")},this),n.src=r)},this)),this._loaded.push(e.get(0)))},n.prototype.destroy=function(){var t,e;for(t in this.handlers)this._core.$element.off(t,this.handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},a.fn.owlCarousel.Constructor.Plugins.Lazy=n}(window.Zepto||window.jQuery,window,document),function(o,n,t,e){var i=function(t){this._core=t,this._previousHeight=null,this._handlers={"initialized.owl.carousel refreshed.owl.carousel":o.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&this.update()},this),"changed.owl.carousel":o.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&"position"===t.property.name&&this.update()},this),"loaded.owl.lazy":o.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&t.element.closest("."+this._core.settings.itemClass).index()===this._core.current()&&this.update()},this)},this._core.options=o.extend({},i.Defaults,this._core.options),this._core.$element.on(this._handlers),this._intervalId=null;var e=this;o(n).on("load",function(){e._core.settings.autoHeight&&e.update()}),o(n).resize(function(){e._core.settings.autoHeight&&(null!=e._intervalId&&clearTimeout(e._intervalId),e._intervalId=setTimeout(function(){e.update()},250))})};i.Defaults={autoHeight:!1,autoHeightClass:"owl-height"},i.prototype.update=function(){var t=this._core._current,e=t+this._core.settings.items,n=this._core.settings.lazyLoad,i=this._core.$stage.children().toArray().slice(t,e),r=[],s=0;o.each(i,function(t,e){r.push(o(e).height())}),(s=Math.max.apply(null,r))<=1&&n&&this._previousHeight&&(s=this._previousHeight),this._previousHeight=s,this._core.$stage.parent().height(s).addClass(this._core.settings.autoHeightClass)},i.prototype.destroy=function(){var t,e;for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},o.fn.owlCarousel.Constructor.Plugins.AutoHeight=i}(window.Zepto||window.jQuery,window,document),function(c,t,e,n){var i=function(t){this._core=t,this._videos={},this._playing=null,this._handlers={"initialized.owl.carousel":c.proxy(function(t){t.namespace&&this._core.register({type:"state",name:"playing",tags:["interacting"]})},this),"resize.owl.carousel":c.proxy(function(t){t.namespace&&this._core.settings.video&&this.isInFullScreen()&&t.preventDefault()},this),"refreshed.owl.carousel":c.proxy(function(t){t.namespace&&this._core.is("resizing")&&this._core.$stage.find(".cloned .owl-video-frame").remove()},this),"changed.owl.carousel":c.proxy(function(t){t.namespace&&"position"===t.property.name&&this._playing&&this.stop()},this),"prepared.owl.carousel":c.proxy(function(t){if(t.namespace){var e=c(t.content).find(".owl-video");e.length&&(e.css("display","none"),this.fetch(e,c(t.content)))}},this)},this._core.options=c.extend({},i.Defaults,this._core.options),this._core.$element.on(this._handlers),this._core.$element.on("click.owl.video",".owl-video-play-icon",c.proxy(function(t){this.play(t)},this))};i.Defaults={video:!1,videoHeight:!1,videoWidth:!1},i.prototype.fetch=function(t,e){var n=t.attr("data-vimeo-id")?"vimeo":t.attr("data-vzaar-id")?"vzaar":"youtube",i=t.attr("data-vimeo-id")||t.attr("data-youtube-id")||t.attr("data-vzaar-id"),r=t.attr("data-width")||this._core.settings.videoWidth,s=t.attr("data-height")||this._core.settings.videoHeight,o=t.attr("href");if(!o)throw new Error("Missing video URL.");if(-1<(i=o.match(/(http:|https:|)\/\/(player.|www.|app.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com|be\-nocookie\.com)|vzaar\.com)\/(video\/|videos\/|embed\/|channels\/.+\/|groups\/.+\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/))[3].indexOf("youtu"))n="youtube";else if(-1<i[3].indexOf("vimeo"))n="vimeo";else{if(!(-1<i[3].indexOf("vzaar")))throw new Error("Video URL not supported.");n="vzaar"}i=i[6],this._videos[o]={type:n,id:i,width:r,height:s},e.attr("data-video",o),this.thumbnail(t,this._videos[o])},i.prototype.thumbnail=function(e,t){var n,i,r=t.width&&t.height?"width:"+t.width+"px;height:"+t.height+"px;":"",s=e.find("img"),o="src",a="",l=this._core.settings,u=function(t){'<div class="owl-video-play-icon"></div>',n=l.lazyLoad?c("<div/>",{class:"owl-video-tn "+a,srcType:t}):c("<div/>",{class:"owl-video-tn",style:"opacity:1;background-image:url("+t+")"}),e.after(n),e.after('<div class="owl-video-play-icon"></div>')};if(e.wrap(c("<div/>",{class:"owl-video-wrapper",style:r})),this._core.settings.lazyLoad&&(o="data-src",a="owl-lazy"),s.length)return u(s.attr(o)),s.remove(),!1;"youtube"===t.type?(i="//img.youtube.com/vi/"+t.id+"/hqdefault.jpg",u(i)):"vimeo"===t.type?c.ajax({type:"GET",url:"//vimeo.com/api/v2/video/"+t.id+".json",jsonp:"callback",dataType:"jsonp",success:function(t){i=t[0].thumbnail_large,u(i)}}):"vzaar"===t.type&&c.ajax({type:"GET",url:"//vzaar.com/api/videos/"+t.id+".json",jsonp:"callback",dataType:"jsonp",success:function(t){i=t.framegrab_url,u(i)}})},i.prototype.stop=function(){this._core.trigger("stop",null,"video"),this._playing.find(".owl-video-frame").remove(),this._playing.removeClass("owl-video-playing"),this._playing=null,this._core.leave("playing"),this._core.trigger("stopped",null,"video")},i.prototype.play=function(t){var e,n=c(t.target).closest("."+this._core.settings.itemClass),i=this._videos[n.attr("data-video")],r=i.width||"100%",s=i.height||this._core.$stage.height();this._playing||(this._core.enter("playing"),this._core.trigger("play",null,"video"),n=this._core.items(this._core.relative(n.index())),this._core.reset(n.index()),(e=c('<iframe frameborder="0" allowfullscreen mozallowfullscreen webkitAllowFullScreen ></iframe>')).attr("height",s),e.attr("width",r),"youtube"===i.type?e.attr("src","//www.youtube.com/embed/"+i.id+"?autoplay=1&rel=0&v="+i.id):"vimeo"===i.type?e.attr("src","//player.vimeo.com/video/"+i.id+"?autoplay=1"):"vzaar"===i.type&&e.attr("src","//view.vzaar.com/"+i.id+"/player?autoplay=true"),c(e).wrap('<div class="owl-video-frame" />').insertAfter(n.find(".owl-video")),this._playing=n.addClass("owl-video-playing"))},i.prototype.isInFullScreen=function(){var t=e.fullscreenElement||e.mozFullScreenElement||e.webkitFullscreenElement;return t&&c(t).parent().hasClass("owl-video-frame")},i.prototype.destroy=function(){var t,e;for(t in this._core.$element.off("click.owl.video"),this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},c.fn.owlCarousel.Constructor.Plugins.Video=i}(window.Zepto||window.jQuery,window,document),function(o,t,e,n){var i=function(t){this.core=t,this.core.options=o.extend({},i.Defaults,this.core.options),this.swapping=!0,this.previous=void 0,this.next=void 0,this.handlers={"change.owl.carousel":o.proxy(function(t){t.namespace&&"position"==t.property.name&&(this.previous=this.core.current(),this.next=t.property.value)},this),"drag.owl.carousel dragged.owl.carousel translated.owl.carousel":o.proxy(function(t){t.namespace&&(this.swapping="translated"==t.type)},this),"translate.owl.carousel":o.proxy(function(t){t.namespace&&this.swapping&&(this.core.options.animateOut||this.core.options.animateIn)&&this.swap()},this)},this.core.$element.on(this.handlers)};i.Defaults={animateOut:!1,animateIn:!1},i.prototype.swap=function(){if(1===this.core.settings.items&&o.support.animation&&o.support.transition){this.core.speed(0);var t,e=o.proxy(this.clear,this),n=this.core.$stage.children().eq(this.previous),i=this.core.$stage.children().eq(this.next),r=this.core.settings.animateIn,s=this.core.settings.animateOut;this.core.current()!==this.previous&&(s&&(t=this.core.coordinates(this.previous)-this.core.coordinates(this.next),n.one(o.support.animation.end,e).css({left:t+"px"}).addClass("animated owl-animated-out").addClass(s)),r&&i.one(o.support.animation.end,e).addClass("animated owl-animated-in").addClass(r))}},i.prototype.clear=function(t){o(t.target).css({left:""}).removeClass("animated owl-animated-out owl-animated-in").removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut),this.core.onTransitionEnd()},i.prototype.destroy=function(){var t,e;for(t in this.handlers)this.core.$element.off(t,this.handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},o.fn.owlCarousel.Constructor.Plugins.Animate=i}(window.Zepto||window.jQuery,window,document),function(i,r,e,t){var n=function(t){this._core=t,this._call=null,this._time=0,this._timeout=0,this._paused=!0,this._handlers={"changed.owl.carousel":i.proxy(function(t){t.namespace&&"settings"===t.property.name?this._core.settings.autoplay?this.play():this.stop():t.namespace&&"position"===t.property.name&&this._paused&&(this._time=0)},this),"initialized.owl.carousel":i.proxy(function(t){t.namespace&&this._core.settings.autoplay&&this.play()},this),"play.owl.autoplay":i.proxy(function(t,e,n){t.namespace&&this.play(e,n)},this),"stop.owl.autoplay":i.proxy(function(t){t.namespace&&this.stop()},this),"mouseover.owl.autoplay":i.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"mouseleave.owl.autoplay":i.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.play()},this),"touchstart.owl.core":i.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"touchend.owl.core":i.proxy(function(){this._core.settings.autoplayHoverPause&&this.play()},this)},this._core.$element.on(this._handlers),this._core.options=i.extend({},n.Defaults,this._core.options)};n.Defaults={autoplay:!1,autoplayTimeout:5e3,autoplayHoverPause:!1,autoplaySpeed:!1},n.prototype._next=function(t){this._call=r.setTimeout(i.proxy(this._next,this,t),this._timeout*(Math.round(this.read()/this._timeout)+1)-this.read()),this._core.is("interacting")||e.hidden||this._core.next(t||this._core.settings.autoplaySpeed)},n.prototype.read=function(){return(new Date).getTime()-this._time},n.prototype.play=function(t,e){var n;this._core.is("rotating")||this._core.enter("rotating"),t=t||this._core.settings.autoplayTimeout,n=Math.min(this._time%(this._timeout||t),t),this._paused?(this._time=this.read(),this._paused=!1):r.clearTimeout(this._call),this._time+=this.read()%t-n,this._timeout=t,this._call=r.setTimeout(i.proxy(this._next,this,e),t-n)},n.prototype.stop=function(){this._core.is("rotating")&&(this._time=0,this._paused=!0,r.clearTimeout(this._call),this._core.leave("rotating"))},n.prototype.pause=function(){this._core.is("rotating")&&!this._paused&&(this._time=this.read(),this._paused=!0,r.clearTimeout(this._call))},n.prototype.destroy=function(){var t,e;for(t in this.stop(),this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},i.fn.owlCarousel.Constructor.Plugins.autoplay=n}(window.Zepto||window.jQuery,window,document),function(s,t,e,n){"use strict";var i=function(t){this._core=t,this._initialized=!1,this._pages=[],this._controls={},this._templates=[],this.$element=this._core.$element,this._overrides={next:this._core.next,prev:this._core.prev,to:this._core.to},this._handlers={"prepared.owl.carousel":s.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.push('<div class="'+this._core.settings.dotClass+'">'+s(t.content).find("[data-dot]").addBack("[data-dot]").attr("data-dot")+"</div>")},this),"added.owl.carousel":s.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.splice(t.position,0,this._templates.pop())},this),"remove.owl.carousel":s.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.splice(t.position,1)},this),"changed.owl.carousel":s.proxy(function(t){t.namespace&&"position"==t.property.name&&this.draw()},this),"initialized.owl.carousel":s.proxy(function(t){t.namespace&&!this._initialized&&(this._core.trigger("initialize",null,"navigation"),this.initialize(),this.update(),this.draw(),this._initialized=!0,this._core.trigger("initialized",null,"navigation"))},this),"refreshed.owl.carousel":s.proxy(function(t){t.namespace&&this._initialized&&(this._core.trigger("refresh",null,"navigation"),this.update(),this.draw(),this._core.trigger("refreshed",null,"navigation"))},this)},this._core.options=s.extend({},i.Defaults,this._core.options),this.$element.on(this._handlers)};i.Defaults={nav:!1,navText:['<span aria-label="Previous">&#x2039;</span>','<span aria-label="Next">&#x203a;</span>'],navSpeed:!1,navElement:'button type="button" role="presentation"',navContainer:!1,navContainerClass:"owl-nav",navClass:["owl-prev","owl-next"],slideBy:1,dotClass:"owl-dot",dotsClass:"owl-dots",dots:!0,dotsEach:!1,dotsData:!1,dotsSpeed:!1,dotsContainer:!1},i.prototype.initialize=function(){var t,n=this._core.settings;for(t in this._controls.$relative=(n.navContainer?s(n.navContainer):s("<div>").addClass(n.navContainerClass).appendTo(this.$element)).addClass("disabled"),this._controls.$previous=s("<"+n.navElement+">").addClass(n.navClass[0]).html(n.navText[0]).prependTo(this._controls.$relative).on("click",s.proxy(function(t){this.prev(n.navSpeed)},this)),this._controls.$next=s("<"+n.navElement+">").addClass(n.navClass[1]).html(n.navText[1]).appendTo(this._controls.$relative).on("click",s.proxy(function(t){this.next(n.navSpeed)},this)),n.dotsData||(this._templates=[s('<button role="button">').addClass(n.dotClass).append(s("<span>")).prop("outerHTML")]),this._controls.$absolute=(n.dotsContainer?s(n.dotsContainer):s("<div>").addClass(n.dotsClass).appendTo(this.$element)).addClass("disabled"),this._controls.$absolute.on("click","button",s.proxy(function(t){var e=s(t.target).parent().is(this._controls.$absolute)?s(t.target).index():s(t.target).parent().index();t.preventDefault(),this.to(e,n.dotsSpeed)},this)),this._overrides)this._core[t]=s.proxy(this[t],this)},i.prototype.destroy=function(){var t,e,n,i,r;for(t in r=this._core.settings,this._handlers)this.$element.off(t,this._handlers[t]);for(e in this._controls)"$relative"===e&&r.navContainer?this._controls[e].html(""):this._controls[e].remove();for(i in this.overides)this._core[i]=this._overrides[i];for(n in Object.getOwnPropertyNames(this))"function"!=typeof this[n]&&(this[n]=null)},i.prototype.update=function(){var t,e,n=this._core.clones().length/2,i=n+this._core.items().length,r=this._core.maximum(!0),s=this._core.settings,o=s.center||s.autoWidth||s.dotsData?1:s.dotsEach||s.items;if("page"!==s.slideBy&&(s.slideBy=Math.min(s.slideBy,s.items)),s.dots||"page"==s.slideBy)for(this._pages=[],t=n,e=0;t<i;t++){if(o<=e||0===e){if(this._pages.push({start:Math.min(r,t-n),end:t-n+o-1}),Math.min(r,t-n)===r)break;e=0,0}e+=this._core.mergers(this._core.relative(t))}},i.prototype.draw=function(){var t,e=this._core.settings,n=this._core.items().length<=e.items,i=this._core.relative(this._core.current()),r=e.loop||e.rewind;this._controls.$relative.toggleClass("disabled",!e.nav||n),e.nav&&(this._controls.$previous.toggleClass("disabled",!r&&i<=this._core.minimum(!0)),this._controls.$next.toggleClass("disabled",!r&&i>=this._core.maximum(!0))),this._controls.$absolute.toggleClass("disabled",!e.dots||n),e.dots&&(t=this._pages.length-this._controls.$absolute.children().length,e.dotsData&&0!==t?this._controls.$absolute.html(this._templates.join("")):0<t?this._controls.$absolute.append(new Array(t+1).join(this._templates[0])):t<0&&this._controls.$absolute.children().slice(t).remove(),this._controls.$absolute.find(".active").removeClass("active"),this._controls.$absolute.children().eq(s.inArray(this.current(),this._pages)).addClass("active"))},i.prototype.onTrigger=function(t){var e=this._core.settings;t.page={index:s.inArray(this.current(),this._pages),count:this._pages.length,size:e&&(e.center||e.autoWidth||e.dotsData?1:e.dotsEach||e.items)}},i.prototype.current=function(){var n=this._core.relative(this._core.current());return s.grep(this._pages,s.proxy(function(t,e){return t.start<=n&&t.end>=n},this)).pop()},i.prototype.getPosition=function(t){var e,n,i=this._core.settings;return"page"==i.slideBy?(e=s.inArray(this.current(),this._pages),n=this._pages.length,t?++e:--e,e=this._pages[(e%n+n)%n].start):(e=this._core.relative(this._core.current()),n=this._core.items().length,t?e+=i.slideBy:e-=i.slideBy),e},i.prototype.next=function(t){s.proxy(this._overrides.to,this._core)(this.getPosition(!0),t)},i.prototype.prev=function(t){s.proxy(this._overrides.to,this._core)(this.getPosition(!1),t)},i.prototype.to=function(t,e,n){var i;!n&&this._pages.length?(i=this._pages.length,s.proxy(this._overrides.to,this._core)(this._pages[(t%i+i)%i].start,e)):s.proxy(this._overrides.to,this._core)(t,e)},s.fn.owlCarousel.Constructor.Plugins.Navigation=i}(window.Zepto||window.jQuery,window,document),function(i,r,t,e){"use strict";var n=function(t){this._core=t,this._hashes={},this.$element=this._core.$element,this._handlers={"initialized.owl.carousel":i.proxy(function(t){t.namespace&&"URLHash"===this._core.settings.startPosition&&i(r).trigger("hashchange.owl.navigation")},this),"prepared.owl.carousel":i.proxy(function(t){if(t.namespace){var e=i(t.content).find("[data-hash]").addBack("[data-hash]").attr("data-hash");if(!e)return;this._hashes[e]=t.content}},this),"changed.owl.carousel":i.proxy(function(t){if(t.namespace&&"position"===t.property.name){var n=this._core.items(this._core.relative(this._core.current())),e=i.map(this._hashes,function(t,e){return t===n?e:null}).join();if(!e||r.location.hash.slice(1)===e)return;r.location.hash=e}},this)},this._core.options=i.extend({},n.Defaults,this._core.options),this.$element.on(this._handlers),i(r).on("hashchange.owl.navigation",i.proxy(function(t){var e=r.location.hash.substring(1),n=this._core.$stage.children(),i=this._hashes[e]&&n.index(this._hashes[e]);void 0!==i&&i!==this._core.current()&&this._core.to(this._core.relative(i),!1,!0)},this))};n.Defaults={URLhashListener:!1},n.prototype.destroy=function(){var t,e;for(t in i(r).off("hashchange.owl.navigation"),this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},i.fn.owlCarousel.Constructor.Plugins.Hash=n}(window.Zepto||window.jQuery,window,document),function(r,t,e,s){var o=r("<support>").get(0).style,a="Webkit Moz O ms".split(" "),n={transition:{end:{WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd",transition:"transitionend"}},animation:{end:{WebkitAnimation:"webkitAnimationEnd",MozAnimation:"animationend",OAnimation:"oAnimationEnd",animation:"animationend"}}},i=function(){return!!c("transform")},l=function(){return!!c("perspective")},u=function(){return!!c("animation")};function c(t,n){var i=!1,e=t.charAt(0).toUpperCase()+t.slice(1);return r.each((t+" "+a.join(e+" ")+e).split(" "),function(t,e){if(o[e]!==s)return i=!n||e,!1}),i}function h(t){return c(t,!0)}(function(){return!!c("transition")})()&&(r.support.transition=new String(h("transition")),r.support.transition.end=n.transition.end[r.support.transition]),u()&&(r.support.animation=new String(h("animation")),r.support.animation.end=n.animation.end[r.support.animation]),i()&&(r.support.transform=new String(h("transform")),r.support.transform3d=l())}(window.Zepto||window.jQuery,window,document),$(document).ready(function(){var t;$("#header-carousel").owlCarousel({items:1,singleItem:!0,dots:!1,loop:!0,nav:!0,navText:["<span class='header-carousel-nav header-carousel-prev'><i class='fa fa-angle-left' aria-hidden='true'></i></span>","<span class='header-carousel-nav header-carousel-next'><i class='fa fa-angle-right' aria-hidden='true'></i></span>"],autoplay:!0,autoplayTimeout:5e3}),$("#consultation").click(function(){$(".popup").show()}),$(".form__close").click(function(){$(".popup").hide()}),t="form input",$(t).focusin(function(){var t=$(this),e=t.parent().find("label");e.addClass("has-content")}),$(t).focusout(function(){var t=$(this),e=t.parent().find("label");0===t.val().trim().length&&e.removeClass("has-content")}),$("form select").change(function(){var t=$(this).parent().find("label");t.hasClass("has-content")||t.addClass("has-content")}),$(".for__order").click(function(t){t.preventDefault(),$(".order").toggle()})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
